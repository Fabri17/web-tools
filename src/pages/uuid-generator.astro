---
import Layout from '../layouts/Layout.astro';
import ToolHeader from '../components/ToolHeader.astro';

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<rect x="4" y="4" width="16" height="16" rx="2" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M8 2v4M16 2v4M8 18v4M16 18v4M2 8h4M2 16h4M18 8h4M18 16h4" stroke="url(#gradient1)" stroke-width="1.5" stroke-linecap="round"/>
		<defs>
			<linearGradient id="gradient1" x1="4" y1="4" x2="20" y2="20" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout 
	title="UUID Generator - Generador de UUID Online | Gratis"
	description="Genera identificadores únicos UUID v4 de forma gratuita. Crea múltiples UUIDs al instante para tus proyectos, bases de datos y APIs."
	url="https://brix.center.com"
	image="/og-image.jpg"
>
	<main>
		<div class="container">
			<ToolHeader 
				title="UUID Generator"
				subtitle="Genera identificadores únicos universales al instante"
				icon={icon}
				showPrimaryButton={false}
			/>
			
			<div class="generator-container">
				<!-- Generator Options -->
				<div class="options-section">
					<div class="option-group">
						<label for="uuidCount">Cantidad de UUIDs a generar:</label>
						<div class="counter-control">
							<button class="counter-btn" id="decrementBtn">-</button>
							<input type="number" id="uuidCount" min="1" max="10" value="1" readonly />
							<button class="counter-btn" id="incrementBtn">+</button>
						</div>
					</div>

					<div class="option-group">
						<label>Formato:</label>
						<div class="format-options">
							<button class="format-btn active" data-format="standard">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" stroke="currentColor" stroke-width="2"/>
								</svg>
								Con guiones
							</button>
							<button class="format-btn" data-format="compact">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<rect x="3" y="3" width="18" height="18" rx="2" stroke="currentColor" stroke-width="2"/>
								</svg>
								Sin guiones
							</button>
							<button class="format-btn" data-format="uppercase">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M5 19h14M5 5l7 14 7-14" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								Mayúsculas
							</button>
						</div>
					</div>

					<button class="generate-btn" id="generateBtn">
						<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z" stroke="currentColor" stroke-width="2"/>
							<path d="M9 12l2 2 4-4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
						Generar UUIDs
					</button>
				</div>

				<!-- Results Section -->
				<div class="results-section">
					<div class="results-header">
						<h3>UUIDs Generados</h3>
						<div class="results-actions">
							<button class="action-btn" id="copyAllBtn" disabled>
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
									<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
								</svg>
								Copiar Todos
							</button>
							<button class="action-btn" id="downloadBtn" disabled>
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5m0 0l5-5m-5 5V3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								Descargar
							</button>
							<button class="action-btn" id="clearBtn" disabled>
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
								</svg>
								Limpiar
							</button>
						</div>
					</div>

					<div id="uuidList" class="uuid-list">
						<div class="empty-state">
							<svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<rect x="4" y="4" width="16" height="16" rx="2" stroke="currentColor" stroke-width="1.5"/>
								<path d="M8 2v4M16 2v4M8 18v4M16 18v4M2 8h4M2 16h4M18 8h4M18 16h4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
							</svg>
							<p>Haz clic en "Generar UUIDs" para crear identificadores únicos</p>
						</div>
					</div>
				</div>

				<!-- Info Section -->
				<div class="info-section">
					<div class="info-card">
						<h4>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
								<path d="M12 16v-4M12 8h.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
							¿Qué es un UUID?
						</h4>
						<p>Un UUID (Universally Unique Identifier) es un identificador de 128 bits que garantiza unicidad sin necesidad de una autoridad central. El UUID v4 utiliza números aleatorios para generar identificadores prácticamente únicos.</p>
					</div>

					<div class="info-card">
						<h4>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
							Casos de uso
						</h4>
						<ul>
							<li>Claves primarias en bases de datos</li>
							<li>Identificadores de sesión</li>
							<li>Referencias únicas en APIs</li>
							<li>Nombres de archivos únicos</li>
							<li>Tracking de eventos</li>
						</ul>
					</div>

					<div class="info-card">
						<h4>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
							Características
						</h4>
						<ul>
							<li>Generación rápida y local</li>
							<li>No requiere conexión a internet</li>
							<li>Probabilidad de colisión extremadamente baja</li>
							<li>Compatible con todos los lenguajes</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem 1rem;
	}

	.generator-container {
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.options-section {
		background: var(--card-bg);
		border-radius: 12px;
		padding: 2rem;
		border: 1px solid var(--border-color);
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.option-group {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.option-group label {
		font-size: 1rem;
		font-weight: 600;
		color: var(--text-primary);
	}

	.counter-control {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.counter-btn {
		width: 48px;
		height: 48px;
		display: flex;
		align-items: center;
		justify-content: center;
		background: rgba(139, 92, 246, 0.1);
		border: 1px solid rgba(139, 92, 246, 0.3);
		border-radius: 8px;
		color: var(--text-primary);
		font-size: 1.5rem;
		font-weight: bold;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.counter-btn:hover {
		background: rgba(139, 92, 246, 0.2);
		border-color: rgba(139, 92, 246, 0.5);
	}

	.counter-control input {
		flex: 1;
		max-width: 120px;
		padding: 0.75rem;
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		color: var(--text-primary);
		font-size: 1.125rem;
		font-weight: 600;
		text-align: center;
		cursor: default;
		user-select: none;
	}

	.counter-control input:focus {
		outline: none;
		border-color: rgba(139, 92, 246, 0.5);
		box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
	}

	.format-options {
		display: flex;
		gap: 1rem;
		flex-wrap: wrap;
	}

	.format-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 1.5rem;
		background: rgba(139, 92, 246, 0.1);
		border: 1px solid rgba(139, 92, 246, 0.2);
		border-radius: 8px;
		color: var(--text-primary);
		font-size: 0.9rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.format-btn:hover {
		background: rgba(139, 92, 246, 0.2);
		border-color: rgba(139, 92, 246, 0.4);
	}

	.format-btn.active {
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		border-color: transparent;
		color: white;
	}

	.generate-btn {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.75rem;
		padding: 1rem 2rem;
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		border: none;
		border-radius: 12px;
		color: white;
		font-size: 1.125rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
	}

	.generate-btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
	}

	.generate-btn:active {
		transform: translateY(0);
	}

	.results-section {
		background: var(--card-bg);
		border-radius: 12px;
		padding: 1.5rem;
		border: 1px solid var(--border-color);
	}

	.results-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1.5rem;
	}

	.results-header h3 {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--text-primary);
		margin: 0;
	}

	.results-actions {
		display: flex;
		gap: 0.5rem;
	}

	.action-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		background: rgba(139, 92, 246, 0.1);
		border: 1px solid rgba(139, 92, 246, 0.2);
		border-radius: 6px;
		color: var(--text-primary);
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.action-btn:hover:not(:disabled) {
		background: rgba(139, 92, 246, 0.2);
		border-color: rgba(139, 92, 246, 0.4);
	}

	.action-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.uuid-list {
		min-height: 300px;
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.empty-state {
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
		height: 300px;
		color: var(--text-secondary);
		text-align: center;
		gap: 1rem;
	}

	.empty-state svg {
		opacity: 0.5;
	}

	:global(.uuid-item) {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1rem;
		background: #ffffff;
		border: 1px solid rgba(139, 92, 246, 0.2);
		border-radius: 8px;
		transition: all 0.3s ease;
	}

	:global(.uuid-item:hover) {
		border-color: rgba(139, 92, 246, 0.3);
		box-shadow: 0 2px 8px rgba(139, 92, 246, 0.1);
	}

	:global(.uuid-text) {
		flex: 1;
		font-family: 'Monaco', 'Courier New', monospace;
		font-size: 0.9rem;
		color: #1a1a2e;
		word-break: break-all;
	}

	:global(.uuid-copy-btn) {
		padding: 0.5rem;
		background: rgba(139, 92, 246, 0.1);
		border: 1px solid rgba(139, 92, 246, 0.2);
		border-radius: 6px;
		color: #1a1a2e;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		min-width: 36px;
		height: 36px;
	}

	:global(.uuid-copy-btn:hover) {
		background: rgba(139, 92, 246, 0.2);
		border-color: rgba(139, 92, 246, 0.4);
	}

	:global(.uuid-copy-btn svg) {
		color: currentColor;
	}

	.info-section {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
		margin-top: 2rem;
	}

	.info-card {
		background: var(--card-bg);
		border-radius: 12px;
		padding: 1.5rem;
		border: 1px solid var(--border-color);
	}

	.info-card h4 {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 1.125rem;
		font-weight: 600;
		color: var(--text-primary);
		margin: 0 0 1rem 0;
	}

	.info-card h4 svg {
		color: #8b5cf6;
	}

	.info-card p {
		color: var(--text-secondary);
		line-height: 1.6;
		margin: 0;
	}

	.info-card ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.info-card ul li {
		position: relative;
		padding-left: 1.5rem;
		color: var(--text-secondary);
		line-height: 1.8;
	}

	.info-card ul li::before {
		content: "→";
		position: absolute;
		left: 0;
		color: #8b5cf6;
		font-weight: bold;
	}

	@media (max-width: 768px) {
		.results-header {
			flex-direction: column;
			align-items: flex-start;
			gap: 1rem;
		}

		.results-actions {
			width: 100%;
		}

		.action-btn {
			flex: 1;
			font-size: 0.75rem;
			padding: 0.5rem 0.5rem;
		}

		.format-options {
			flex-direction: column;
		}

		.format-btn {
			width: 100%;
			justify-content: center;
		}
	}

	/* Light Mode (default) */
	.container {
		--bg-primary: #ffffff;
		--bg-secondary: #f8f9fa;
		--card-bg: #ffffff;
		--text-primary: #1a1a2e;
		--text-secondary: #6b7280;
		--border-color: rgba(139, 92, 246, 0.2);
	}

	/* Dark Mode */
	:global(.dark-mode) .container {
		--bg-primary: #0f172a;
		--bg-secondary: #1e293b;
		--card-bg: #1e293b;
		--text-primary: #f8fafc;
		--text-secondary: #cbd5e1;
		--border-color: #334155;
	}

	:global(.dark-mode) .options-section,
	:global(.dark-mode) .results-section,
	:global(.dark-mode) .info-card {
		background: #1e293b;
		border-color: #334155;
	}

	:global(.dark-mode) .counter-control input {
		background: #0f172a;
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .counter-btn {
		background: rgba(139, 92, 246, 0.2);
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .counter-btn:hover {
		background: rgba(139, 92, 246, 0.3);
		border-color: #8b5cf6;
	}

	:global(.dark-mode) .format-btn {
		background: rgba(139, 92, 246, 0.2);
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .format-btn:hover {
		background: rgba(139, 92, 246, 0.3);
		border-color: #8b5cf6;
	}

	:global(.dark-mode) :global(.uuid-item) {
		background: #0f172a;
		border-color: #334155;
	}

	:global(.dark-mode) :global(.uuid-item:hover) {
		border-color: #8b5cf6;
	}

	:global(.dark-mode) :global(.uuid-text) {
		color: #cbd5e1;
	}

	:global(.dark-mode) :global(.uuid-copy-btn) {
		background: rgba(139, 92, 246, 0.2);
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) :global(.uuid-copy-btn:hover) {
		background: rgba(139, 92, 246, 0.3);
		border-color: #8b5cf6;
		color: #f8fafc;
	}

	:global(.dark-mode) :global(.uuid-copy-btn svg) {
		color: #cbd5e1;
	}

	:global(.dark-mode) :global(.uuid-copy-btn:hover svg) {
		color: #c084fc;
	}

	:global(.dark-mode) .action-btn {
		background: rgba(139, 92, 246, 0.2);
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .action-btn:hover:not(:disabled) {
		background: rgba(139, 92, 246, 0.3);
		border-color: #8b5cf6;
	}

	:global(.dark-mode) .empty-state {
		color: #64748b;
	}
</style>

<script>
	let currentFormat: 'standard' | 'compact' | 'uppercase' = 'standard';
	let generatedUUIDs: string[] = [];

	// Elements
	const uuidCountInput = document.getElementById('uuidCount') as HTMLInputElement;
	const decrementBtn = document.getElementById('decrementBtn') as HTMLButtonElement;
	const incrementBtn = document.getElementById('incrementBtn') as HTMLButtonElement;
	const generateBtn = document.getElementById('generateBtn') as HTMLButtonElement;
	const formatButtons = document.querySelectorAll('.format-btn');
	const uuidList = document.getElementById('uuidList') as HTMLDivElement;
	const copyAllBtn = document.getElementById('copyAllBtn') as HTMLButtonElement;
	const downloadBtn = document.getElementById('downloadBtn') as HTMLButtonElement;
	const clearBtn = document.getElementById('clearBtn') as HTMLButtonElement;

	// UUID v4 Generator
	function generateUUID(): string {
		return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
			const r = Math.random() * 16 | 0;
			const v = c === 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	}

	// Format UUID
	function formatUUID(uuid: string): string {
		switch (currentFormat) {
			case 'compact':
				return uuid.replace(/-/g, '');
			case 'uppercase':
				return uuid.toUpperCase();
			default:
				return uuid;
		}
	}

	// Counter controls
	decrementBtn.addEventListener('click', () => {
		const current = parseInt(uuidCountInput.value);
		if (current > 1) {
			uuidCountInput.value = (current - 1).toString();
		}
	});

	incrementBtn.addEventListener('click', () => {
		const current = parseInt(uuidCountInput.value);
		if (current < 10) {
			uuidCountInput.value = (current + 1).toString();
		}
	});

	// Format selection
	formatButtons.forEach(btn => {
		btn.addEventListener('click', () => {
			formatButtons.forEach(b => b.classList.remove('active'));
			btn.classList.add('active');
			currentFormat = btn.getAttribute('data-format') as 'standard' | 'compact' | 'uppercase';
		});
	});

	// Generate UUIDs
	generateBtn.addEventListener('click', () => {
		const count = parseInt(uuidCountInput.value) || 1;
		generatedUUIDs = [];

		for (let i = 0; i < count; i++) {
			const uuid = generateUUID();
			generatedUUIDs.push(formatUUID(uuid));
		}

		displayUUIDs();
		enableButtons();
		showNotification(`¡${count} UUID${count > 1 ? 's' : ''} generado${count > 1 ? 's' : ''}!`, 'success');
	});

	// Display UUIDs
	function displayUUIDs() {
		uuidList.innerHTML = '';

		generatedUUIDs.forEach((uuid, index) => {
			const item = document.createElement('div');
			item.className = 'uuid-item';
			item.innerHTML = `
				<div class="uuid-text">${uuid}</div>
				<button class="uuid-copy-btn" data-uuid="${uuid}">
					<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
						<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
						<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
					</svg>
				</button>
			`;
			uuidList.appendChild(item);

			// Add copy event
			const copyBtn = item.querySelector('.uuid-copy-btn') as HTMLButtonElement;
			copyBtn.addEventListener('click', () => copyToClipboard(uuid));
		});
	}

	// Copy single UUID
	async function copyToClipboard(text: string) {
		try {
			await navigator.clipboard.writeText(text);
			showNotification('¡UUID copiado!', 'success');
		} catch (error) {
			showNotification('Error al copiar', 'error');
		}
	}

	// Copy all UUIDs
	copyAllBtn.addEventListener('click', async () => {
		const allUUIDs = generatedUUIDs.join('\n');
		try {
			await navigator.clipboard.writeText(allUUIDs);
			showNotification('¡Todos los UUIDs copiados!', 'success');
		} catch (error) {
			showNotification('Error al copiar', 'error');
		}
	});

	// Download UUIDs
	downloadBtn.addEventListener('click', () => {
		const text = generatedUUIDs.join('\n');
		const blob = new Blob([text], { type: 'text/plain' });
		const url = URL.createObjectURL(blob);
		const a = document.createElement('a');
		a.href = url;
		a.download = `uuids-${new Date().toISOString().split('T')[0]}.txt`;
		a.click();
		URL.revokeObjectURL(url);
		showNotification('¡Archivo descargado!', 'success');
	});

	// Clear
	clearBtn.addEventListener('click', () => {
		generatedUUIDs = [];
		uuidList.innerHTML = `
			<div class="empty-state">
				<svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<rect x="4" y="4" width="16" height="16" rx="2" stroke="currentColor" stroke-width="1.5"/>
					<path d="M8 2v4M16 2v4M8 18v4M16 18v4M2 8h4M2 16h4M18 8h4M18 16h4" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
				</svg>
				<p>Haz clic en "Generar UUIDs" para crear identificadores únicos</p>
			</div>
		`;
		disableButtons();
		showNotification('Lista limpiada', 'info');
	});

	// Enable/Disable buttons
	function enableButtons() {
		copyAllBtn.disabled = false;
		downloadBtn.disabled = false;
		clearBtn.disabled = false;
	}

	function disableButtons() {
		copyAllBtn.disabled = true;
		downloadBtn.disabled = true;
		clearBtn.disabled = true;
	}

	// Notification system
	function showNotification(message: string, type: 'success' | 'error' | 'info') {
		const notification = document.createElement('div');
		notification.className = `notification notification-${type}`;
		notification.textContent = message;
		
		notification.style.cssText = `
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
			color: white;
			border-radius: 8px;
			font-weight: 500;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
		`;

		document.body.appendChild(notification);

		setTimeout(() => {
			notification.style.animation = 'slideOut 0.3s ease';
			setTimeout(() => notification.remove(), 300);
		}, 3000);
	}

	// Add animations
	const style = document.createElement('style');
	style.textContent = `
		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}
		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}
	`;
	document.head.appendChild(style);
</script>
