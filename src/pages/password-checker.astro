---
import Layout from "../layouts/Layout.astro";
import ToolHeader from "../components/ToolHeader.astro";

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M9 12l2 2 4-4" stroke="url(#gradient1)" stroke-width="1.5" stroke-linecap="round"/>
		<defs>
			<linearGradient id="gradient1" x1="2" y1="2" x2="21" y2="22" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout
  title="Password Checker - Verificador de Fortaleza de Contraseñas | Gratis"
  description="Analiza la fortaleza de tus contraseñas de forma segura. Verifica la seguridad, recibe sugerencias de mejora y estima el tiempo de hackeo. Completamente privado."
  url="https://brix.center.com"
  image="/og-image.jpg"
>
  <main>
    <div class="container">
      <ToolHeader
        title="Password Checker"
        subtitle="Verifica la fortaleza y seguridad de tus contraseñas"
        icon={icon}
        showPrimaryButton={false}
      />

      <div class="checker-container">
        <!-- Password Input -->
        <div class="input-section">
          <div class="password-input-group">
            <input
              type="password"
              id="passwordInput"
              placeholder="Escribe tu contraseña aquí..."
              class="password-input"
              autocomplete="off"
            />
            <button class="toggle-visibility" id="toggleBtn" type="button">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                class="eye-open"
              >
                <path
                  d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"
                  stroke="currentColor"
                  stroke-width="2"></path>
                <circle
                  cx="12"
                  cy="12"
                  r="3"
                  stroke="currentColor"
                  stroke-width="2"></circle>
              </svg>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
                class="eye-closed"
                style="display: none;"
              >
                <path
                  d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
                <line
                  x1="1"
                  y1="1"
                  x2="23"
                  y2="23"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></line>
              </svg>
            </button>
          </div>
        </div>

        <!-- Results Section -->
        <div id="resultsSection" class="results-section" style="display: none;">
          <!-- Strength Score -->
          <div class="strength-card">
            <div class="strength-header">
              <h3>Fortaleza</h3>
              <div id="strengthScore" class="strength-score">0/100</div>
            </div>

            <div class="strength-meter">
              <div id="strengthBar" class="strength-bar-fill"></div>
            </div>

            <div id="strengthLabel" class="strength-label">Muy Débil</div>
          </div>

          <!-- Analysis Grid -->
          <div class="analysis-grid">
            <!-- Length Check -->
            <div class="check-card" id="lengthCheck">
              <div class="check-icon"></div>
              <div class="check-content">
                <h4>Longitud</h4>
                <p id="lengthText">-</p>
              </div>
            </div>

            <!-- Uppercase Check -->
            <div class="check-card" id="uppercaseCheck">
              <div class="check-icon"></div>
              <div class="check-content">
                <h4>Mayúsculas</h4>
                <p id="uppercaseText">-</p>
              </div>
            </div>

            <!-- Lowercase Check -->
            <div class="check-card" id="lowercaseCheck">
              <div class="check-icon"></div>
              <div class="check-content">
                <h4>Minúsculas</h4>
                <p id="lowercaseText">-</p>
              </div>
            </div>

            <!-- Numbers Check -->
            <div class="check-card" id="numbersCheck">
              <div class="check-icon"></div>
              <div class="check-content">
                <h4>Números</h4>
                <p id="numbersText">-</p>
              </div>
            </div>

            <!-- Symbols Check -->
            <div class="check-card" id="symbolsCheck">
              <div class="check-icon"></div>
              <div class="check-content">
                <h4>Símbolos</h4>
                <p id="symbolsText">-</p>
              </div>
            </div>
          </div>

          <!-- Crack Time -->
          <div class="crack-time-card">
            <h4>Tiempo estimado de hackeo</h4>
            <p id="crackTimeText" class="crack-time-value">-</p>
          </div>

          <!-- Suggestions -->
          <div id="suggestionsCard" class="suggestions-card">
            <h3>Sugerencias</h3>
            <ul id="suggestionsList" class="suggestions-list"></ul>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<script>
  // Common passwords list (top 100 most common)
  const COMMON_PASSWORDS = [
    "123456",
    "password",
    "123456789",
    "12345678",
    "12345",
    "1234567",
    "password1",
    "123123",
    "1234567890",
    "000000",
    "qwerty",
    "abc123",
    "million2",
    "1234",
    "iloveyou",
    "aaron431",
    "password123",
    "omgpop",
    "qwertyuiop",
    "1q2w3e4r",
    "qwerty123",
    "letmein",
    "monkey",
    "dragon",
    "admin",
    "welcome",
    "login",
    "football",
    "master",
    "hello",
    "freedom",
  ];

  // DOM Elements
  const passwordInput = document.getElementById(
    "passwordInput"
  ) as HTMLInputElement;
  const toggleBtn = document.getElementById("toggleBtn") as HTMLButtonElement;
  const resultsSection = document.getElementById(
    "resultsSection"
  ) as HTMLDivElement;
  const strengthScore = document.getElementById(
    "strengthScore"
  ) as HTMLDivElement;
  const strengthBar = document.getElementById("strengthBar") as HTMLDivElement;
  const strengthLabel = document.getElementById(
    "strengthLabel"
  ) as HTMLDivElement;
  const crackTimeText = document.getElementById(
    "crackTimeText"
  ) as HTMLParagraphElement;
  const suggestionsList = document.getElementById(
    "suggestionsList"
  ) as HTMLUListElement;
  const suggestionsCard = document.getElementById(
    "suggestionsCard"
  ) as HTMLDivElement;

  // Toggle password visibility
  toggleBtn.addEventListener("click", () => {
    const type = passwordInput.type === "password" ? "text" : "password";
    passwordInput.type = type;

    const eyeOpen = toggleBtn.querySelector(".eye-open") as SVGElement;
    const eyeClosed = toggleBtn.querySelector(".eye-closed") as SVGElement;

    if (type === "text") {
      eyeOpen.style.display = "none";
      eyeClosed.style.display = "block";
    } else {
      eyeOpen.style.display = "block";
      eyeClosed.style.display = "none";
    }
  });

  // Analyze password on input
  passwordInput.addEventListener("input", () => {
    const password = passwordInput.value;

    if (password.length === 0) {
      resultsSection.style.display = "none";
      return;
    }

    resultsSection.style.display = "block";
    analyzePassword(password);
  });

  function analyzePassword(password: string) {
    const analysis = {
      length: password.length,
      hasUppercase: /[A-Z]/.test(password),
      hasLowercase: /[a-z]/.test(password),
      hasNumbers: /[0-9]/.test(password),
      hasSymbols: /[^a-zA-Z0-9]/.test(password),
      isCommon: COMMON_PASSWORDS.includes(password.toLowerCase()),
    };

    updateChecks(analysis);
    const strength = calculateStrength(analysis);
    updateStrength(strength);
    const crackTime = estimateCrackTime(password, analysis);
    updateCrackTime(crackTime);
    const suggestions = generateSuggestions(analysis);
    updateSuggestions(suggestions);
  }

  function updateChecks(analysis: any) {
    // Length
    const lengthCard = document.getElementById("lengthCheck")!;
    const lengthText = document.getElementById("lengthText")!;
    if (analysis.length >= 12) {
      lengthCard.classList.add("pass");
      lengthCard.classList.remove("fail");
      lengthText.textContent = `${analysis.length} caracteres`;
    } else if (analysis.length >= 8) {
      lengthCard.classList.add("pass");
      lengthCard.classList.remove("fail");
      lengthText.textContent = `${analysis.length} caracteres`;
    } else {
      lengthCard.classList.add("fail");
      lengthCard.classList.remove("pass");
      lengthText.textContent = `${analysis.length} caracteres`;
    }

    // Uppercase
    updateCheckCard(
      "uppercaseCheck",
      "uppercaseText",
      analysis.hasUppercase,
      "Incluidas",
      "No incluidas"
    );

    // Lowercase
    updateCheckCard(
      "lowercaseCheck",
      "lowercaseText",
      analysis.hasLowercase,
      "Incluidas",
      "No incluidas"
    );

    // Numbers
    updateCheckCard(
      "numbersCheck",
      "numbersText",
      analysis.hasNumbers,
      "Incluidos",
      "No incluidos"
    );

    // Symbols
    updateCheckCard(
      "symbolsCheck",
      "symbolsText",
      analysis.hasSymbols,
      "Incluidos",
      "No incluidos"
    );
  }

  function updateCheckCard(
    cardId: string,
    textId: string,
    passed: boolean,
    passText: string,
    failText: string
  ) {
    const card = document.getElementById(cardId)!;
    const text = document.getElementById(textId)!;

    if (passed) {
      card.classList.add("pass");
      card.classList.remove("fail");
      text.textContent = passText;
    } else {
      card.classList.add("fail");
      card.classList.remove("pass");
      text.textContent = failText;
    }
  }

  function calculateStrength(analysis: any): {
    score: number;
    label: string;
    color: string;
  } {
    let score = 0;

    // Length scoring
    if (analysis.length >= 8) score += 20;
    if (analysis.length >= 12) score += 15;
    if (analysis.length >= 16) score += 15;

    // Character variety
    if (analysis.hasUppercase) score += 15;
    if (analysis.hasLowercase) score += 15;
    if (analysis.hasNumbers) score += 10;
    if (analysis.hasSymbols) score += 10;

    // Penalties
    if (analysis.isCommon) score -= 50;

    // Ensure score is within bounds
    score = Math.max(0, Math.min(100, score));

    let label = "";
    let color = "";

    if (score < 20) {
      label = "Muy Débil";
      color = "#ef4444";
    } else if (score < 40) {
      label = "Débil";
      color = "#f97316";
    } else if (score < 60) {
      label = "Media";
      color = "#eab308";
    } else if (score < 80) {
      label = "Fuerte";
      color = "#84cc16";
    } else {
      label = "Muy Fuerte";
      color = "#22c55e";
    }

    return { score, label, color };
  }

  function updateStrength(strength: {
    score: number;
    label: string;
    color: string;
  }) {
    strengthScore.textContent = `${strength.score}/100`;
    strengthBar.style.width = `${strength.score}%`;
    strengthBar.style.backgroundColor = strength.color;
    strengthLabel.textContent = strength.label;
    strengthLabel.style.color = strength.color;
  }

  function estimateCrackTime(password: string, analysis: any): string {
    let charsetSize = 0;
    if (analysis.hasLowercase) charsetSize += 26;
    if (analysis.hasUppercase) charsetSize += 26;
    if (analysis.hasNumbers) charsetSize += 10;
    if (analysis.hasSymbols) charsetSize += 32;

    const entropy = password.length * Math.log2(charsetSize);
    const guessesPerSecond = 10_000_000_000; // 10 billion guesses/sec
    const possibleCombinations = Math.pow(2, entropy);
    const secondsToCrack = possibleCombinations / (2 * guessesPerSecond);

    if (analysis.isCommon) return "Menos de 1 segundo (contraseña común)";
    if (secondsToCrack < 1) return "Menos de 1 segundo";
    if (secondsToCrack < 60) return `${Math.round(secondsToCrack)} segundos`;
    if (secondsToCrack < 3600)
      return `${Math.round(secondsToCrack / 60)} minutos`;
    if (secondsToCrack < 86400)
      return `${Math.round(secondsToCrack / 3600)} horas`;
    if (secondsToCrack < 31536000)
      return `${Math.round(secondsToCrack / 86400)} días`;
    if (secondsToCrack < 31536000 * 100)
      return `${Math.round(secondsToCrack / 31536000)} años`;
    if (secondsToCrack < 31536000 * 1000000)
      return `${Math.round(secondsToCrack / (31536000 * 1000))} mil años`;
    if (secondsToCrack < 31536000 * 1000000000)
      return `${Math.round(secondsToCrack / (31536000 * 1000000))} millones de años`;
    return "Billones de años";
  }

  function updateCrackTime(time: string) {
    crackTimeText.textContent = time;
  }

  function generateSuggestions(analysis: any): string[] {
    const suggestions = [];

    if (analysis.length < 12) {
      suggestions.push("Aumenta la longitud a al menos 12 caracteres");
    }

    if (!analysis.hasUppercase) {
      suggestions.push("Añade letras mayúsculas");
    }

    if (!analysis.hasLowercase) {
      suggestions.push("Añade letras minúsculas");
    }

    if (!analysis.hasNumbers) {
      suggestions.push("Incluye números");
    }

    if (!analysis.hasSymbols) {
      suggestions.push("Añade símbolos especiales");
    }

    if (analysis.isCommon) {
      suggestions.push("Evita contraseñas comunes");
    }

    if (suggestions.length === 0) {
      suggestions.push("¡Tu contraseña es fuerte!");
    }

    return suggestions;
  }

  function updateSuggestions(suggestions: string[]) {
    suggestionsList.innerHTML = "";
    suggestions.forEach((suggestion) => {
      const li = document.createElement("li");
      li.textContent = suggestion;
      suggestionsList.appendChild(li);
    });
  }
</script>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem 4rem 1rem;
  }

  .checker-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  /* Input Section */
  .input-section {
    background: white;
    border: 1px solid #e4e4e7;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .password-input-group {
    position: relative;
    display: flex;
    align-items: center;
  }

  .password-input {
    flex: 1;
    padding: 1rem 3.5rem 1rem 1.25rem;
    font-size: 1rem;
    border: 2px solid #e4e4e7;
    border-radius: 12px;
    font-family: "Courier New", monospace;
    transition: all 0.2s ease;
    width: 100%;
    background: white;
  }

  .password-input:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .toggle-visibility {
    position: absolute;
    right: 1rem;
    background: none;
    border: none;
    cursor: pointer;
    color: #71717a;
    padding: 0.5rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: color 0.2s ease;
  }

  .toggle-visibility:hover {
    color: #8b5cf6;
  }

  /* Results Section */
  .results-section {
    display: flex;
    flex-direction: column;
    gap: 2rem;
    animation: fadeIn 0.3s ease;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Strength Card */
  .strength-card {
    background: white;
    border: 1px solid #e4e4e7;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    margin-bottom: 1rem;
  }

  .strength-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .strength-header h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: #18181b;
    margin: 0;
  }

  .strength-score {
    font-size: 1.5rem;
    font-weight: 700;
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-clip: text;
  }

  .strength-meter {
    width: 100%;
    height: 12px;
    background: #f4f4f5;
    border-radius: 6px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .strength-bar-fill {
    height: 100%;
    width: 0%;
    transition: all 0.3s ease;
    border-radius: 6px;
  }

  .strength-label {
    font-size: 1.25rem;
    font-weight: 600;
    text-align: center;
  }

  /* Analysis Grid */
  .analysis-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 1.25rem;
    margin-bottom: 1rem;
  }

  .check-card {
    display: flex;
    align-items: center;
    gap: 1.25rem;
    padding: 1.5rem;
    background: white;
    border: 2px solid #e4e4e7;
    border-radius: 12px;
    transition: all 0.3s ease;
  }

  .check-icon {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    flex-shrink: 0;
    position: relative;
  }

  .check-icon::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }

  .check-card.pass {
    border-color: #22c55e;
    background: #f0fdf4;
  }

  .check-card.pass .check-icon {
    background: #22c55e;
  }

  .check-card.pass .check-icon::after {
    content: "✓";
    color: white;
    font-weight: bold;
    font-size: 14px;
  }

  .check-card.fail {
    border-color: #ef4444;
    background: #fef2f2;
  }

  .check-card.fail .check-icon {
    background: #ef4444;
  }

  .check-card.fail .check-icon::after {
    content: "✕";
    color: white;
    font-weight: bold;
    font-size: 14px;
  }

  .check-content h4 {
    font-size: 0.95rem;
    font-weight: 600;
    color: #18181b;
    margin: 0 0 0.25rem 0;
  }

  .check-content p {
    font-size: 0.875rem;
    color: #71717a;
    margin: 0;
  }

  /* Crack Time Card */
  .crack-time-card {
    padding: 2rem;
    background: linear-gradient(135deg, #fefce8 0%, #fef9c3 100%);
    border: 2px solid #fde047;
    border-radius: 16px;
    text-align: center;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
    margin-bottom: 1rem;
  }

  .crack-time-card h4 {
    font-size: 1rem;
    font-weight: 600;
    color: #854d0e;
    margin: 0 0 0.75rem 0;
  }

  .crack-time-value {
    font-size: 1.5rem;
    font-weight: 700;
    color: #a16207;
    margin: 0;
  }

  /* Suggestions Card */
  .suggestions-card {
    background: white;
    border: 1px solid #e4e4e7;
    border-radius: 16px;
    padding: 2rem;
    box-shadow: 0 1px 3px rgba(0, 0, 0, 0.05);
  }

  .suggestions-card h3 {
    font-size: 1.125rem;
    font-weight: 600;
    color: #18181b;
    margin: 0 0 1.25rem 0;
  }

  .suggestions-list {
    list-style: none;
    padding: 0;
    margin: 0;
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .suggestions-list li {
    padding-left: 1.75rem;
    position: relative;
    color: #52525b;
    font-size: 0.95rem;
  }

  .suggestions-list li::before {
    content: "→";
    position: absolute;
    left: 0;
    color: #8b5cf6;
    font-weight: bold;
  }

  /* Dark Mode */
  :global(.dark-mode) .input-section,
  :global(.dark-mode) .strength-card,
  :global(.dark-mode) .suggestions-card {
    background: #1e293b;
    border-color: #334155;
  }

  :global(.dark-mode) .strength-header h3,
  :global(.dark-mode) .suggestions-card h3 {
    color: #f1f5f9;
  }

  :global(.dark-mode) .password-input {
    background: #0f172a;
    border-color: #334155;
    color: #f1f5f9;
  }

  :global(.dark-mode) .password-input:focus {
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .toggle-visibility {
    color: #94a3b8;
  }

  :global(.dark-mode) .check-card {
    background: #0f172a;
    border-color: #334155;
  }

  :global(.dark-mode) .check-card.pass {
    background: #064e3b;
    border-color: #10b981;
  }

  :global(.dark-mode) .check-card.fail {
    background: #7f1d1d;
    border-color: #f87171;
  }

  :global(.dark-mode) .check-content h4 {
    color: #f1f5f9;
  }

  :global(.dark-mode) .check-content p {
    color: #94a3b8;
  }

  :global(.dark-mode) .crack-time-card {
    background: linear-gradient(135deg, #422006 0%, #713f12 100%);
    border-color: #ca8a04;
  }

  :global(.dark-mode) .crack-time-card h4 {
    color: #fef3c7;
  }

  :global(.dark-mode) .crack-time-value {
    color: #fde047;
  }

  :global(.dark-mode) .suggestions-list li {
    color: #cbd5e1;
  }

  :global(.dark-mode) .strength-meter {
    background: #334155;
  }

  @media (max-width: 768px) {
    .container {
      padding: 1.5rem 1rem 3rem 1rem;
    }

    .input-section,
    .strength-card,
    .suggestions-card {
      padding: 1.5rem;
    }

    .analysis-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .check-card {
      padding: 1.25rem;
    }

    .crack-time-card {
      padding: 1.5rem;
    }

    .strength-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.75rem;
    }

    .password-input {
      font-size: 0.95rem;
    }
  }
</style>
