---
import Layout from '../layouts/Layout.astro';
import ToolHeader from '../components/ToolHeader.astro';

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<rect x="4" y="4" width="16" height="16" rx="2" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M8 12h8M12 8v8" stroke="url(#gradient1)" stroke-width="1.5"/>
		<defs>
			<linearGradient id="gradient1" x1="4" y1="4" x2="20" y2="20" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout 
	title="Base64 Encoder/Decoder - Codificador Base64 Online | Gratis"
	description="Codifica y decodifica texto en Base64 de forma gratuita. Herramienta rápida y segura para convertir texto a Base64 y viceversa."
	url="https://brix.center.com"
	image="/og-image.jpg"
>
	<main>
		<div class="container">
			<ToolHeader 
				title="Base64 Encoder/Decoder"
				subtitle="Codifica y decodifica texto en Base64 al instante"
				icon={icon}
				showPrimaryButton={false}
			/>
			
			<div class="encoder-container">
				<!-- Mode Selector -->
				<div class="mode-selector">
					<button class="mode-btn active" data-mode="encode">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M7 16l-4-4m0 0l4-4m-4 4h18" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
						Codificar
					</button>
					<button class="mode-btn" data-mode="decode">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M17 8l4 4m0 0l-4 4m4-4H3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
						Decodificar
					</button>
				</div>

				<!-- Input Section -->
				<div class="input-section">
					<div class="section-header">
						<h3 id="inputLabel">Texto Original</h3>
						<div class="section-actions">
							<button class="action-btn" id="clearInputBtn">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
								</svg>
								Limpiar
							</button>
							<button class="action-btn" id="pasteBtn">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2" stroke="currentColor" stroke-width="2"/>
									<rect x="8" y="2" width="8" height="4" rx="1" stroke="currentColor" stroke-width="2"/>
								</svg>
								Pegar
							</button>
						</div>
					</div>
					<textarea 
						id="inputText" 
						placeholder="Escribe o pega tu texto aquí..."
						rows="8"
						class="text-area"
					></textarea>
					<div class="char-count">
						<span id="inputCount">0</span> caracteres
					</div>
				</div>

				<!-- Convert Button -->
				<div class="convert-section">
					<button class="convert-btn" id="convertBtn">
						<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M7 16l-4-4m0 0l4-4m-4 4h18M17 8l4 4m0 0l-4 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
						</svg>
						<span id="convertBtnText">Codificar</span>
					</button>
				</div>

				<!-- Output Section -->
				<div class="output-section">
					<div class="section-header">
						<h3 id="outputLabel">Resultado Base64</h3>
						<div class="section-actions">
							<button class="action-btn" id="copyBtn" disabled>
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
									<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
								</svg>
								Copiar
							</button>
							<button class="action-btn" id="downloadBtn" disabled>
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5m0 0l5-5m-5 5V3" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								</svg>
								Descargar
							</button>
						</div>
					</div>
					<textarea 
						id="outputText" 
						placeholder="El resultado aparecerá aquí..."
						rows="8"
						class="text-area"
						readonly
					></textarea>
					<div class="char-count">
						<span id="outputCount">0</span> caracteres
					</div>
				</div>

				<!-- Info Section -->
				<div class="info-section">
					<div class="info-card">
						<h4>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
								<path d="M12 16v-4M12 8h.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
							¿Qué es Base64?
						</h4>
						<p>Base64 es un sistema de codificación que convierte datos binarios en texto ASCII. Es ampliamente utilizado para transmitir datos binarios a través de medios que solo soportan texto, como emails o URLs.</p>
					</div>
					<div class="info-card">
						<h4>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
							Casos de uso comunes
						</h4>
						<ul>
							<li>Embeber imágenes en HTML/CSS (Data URIs)</li>
							<li>Enviar archivos adjuntos en APIs REST</li>
							<li>Almacenar datos binarios en JSON</li>
							<li>Codificar credenciales en headers HTTP</li>
						</ul>
					</div>
				</div>
			</div>
		</div>
	</main>
</Layout>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem 1rem;
	}

	.encoder-container {
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.mode-selector {
		display: flex;
		gap: 1rem;
		justify-content: center;
		padding: 1rem;
		background: rgba(139, 92, 246, 0.05);
		border-radius: 12px;
		border: 1px solid rgba(139, 92, 246, 0.1);
	}

	.mode-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.75rem 2rem;
		background: transparent;
		border: 2px solid rgba(139, 92, 246, 0.2);
		border-radius: 8px;
		color: var(--text-secondary);
		font-size: 1rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.mode-btn:hover {
		background: rgba(139, 92, 246, 0.1);
		border-color: rgba(139, 92, 246, 0.4);
		color: var(--text-primary);
	}

	.mode-btn.active {
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		border-color: transparent;
		color: white;
	}

	.mode-btn svg {
		width: 20px;
		height: 20px;
	}

	.input-section,
	.output-section {
		background: var(--card-bg);
		border-radius: 12px;
		padding: 1.5rem;
		border: 1px solid var(--border-color);
	}

	.section-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.section-header h3 {
		font-size: 1.25rem;
		font-weight: 600;
		color: var(--text-primary);
		margin: 0;
	}

	.section-actions {
		display: flex;
		gap: 0.5rem;
	}

	.action-btn {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		padding: 0.5rem 1rem;
		background: rgba(139, 92, 246, 0.1);
		border: 1px solid rgba(139, 92, 246, 0.2);
		border-radius: 6px;
		color: var(--text-primary);
		font-size: 0.875rem;
		font-weight: 500;
		cursor: pointer;
		transition: all 0.3s ease;
	}

	.action-btn:hover:not(:disabled) {
		background: rgba(139, 92, 246, 0.2);
		border-color: rgba(139, 92, 246, 0.4);
	}

	.action-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.text-area {
		width: 100%;
		padding: 1rem;
		background: var(--bg-primary);
		border: 1px solid var(--border-color);
		border-radius: 8px;
		color: var(--text-primary);
		font-family: 'Monaco', 'Courier New', monospace;
		font-size: 0.875rem;
		line-height: 1.6;
		resize: vertical;
		min-height: 200px;
	}

	.text-area:focus {
		outline: none;
		border-color: rgba(139, 92, 246, 0.5);
		box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
	}

	.char-count {
		margin-top: 0.5rem;
		font-size: 0.875rem;
		color: var(--text-secondary);
		text-align: right;
	}

	.char-count span {
		color: #8b5cf6;
		font-weight: 600;
	}

	.convert-section {
		display: flex;
		justify-content: center;
		padding: 1rem 0;
	}

	.convert-btn {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		padding: 1rem 3rem;
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		border: none;
		border-radius: 12px;
		color: white;
		font-size: 1.125rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
	}

	.convert-btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
	}

	.convert-btn:active {
		transform: translateY(0);
	}

	.info-section {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 1.5rem;
		margin-top: 2rem;
	}

	.info-card {
		background: var(--card-bg);
		border-radius: 12px;
		padding: 1.5rem;
		border: 1px solid var(--border-color);
	}

	.info-card h4 {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 1.125rem;
		font-weight: 600;
		color: var(--text-primary);
		margin: 0 0 1rem 0;
	}

	.info-card h4 svg {
		color: #8b5cf6;
	}

	.info-card p {
		color: var(--text-secondary);
		line-height: 1.6;
		margin: 0;
	}

	.info-card ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.info-card ul li {
		position: relative;
		padding-left: 1.5rem;
		color: var(--text-secondary);
		line-height: 1.8;
	}

	.info-card ul li::before {
		content: "→";
		position: absolute;
		left: 0;
		color: #8b5cf6;
		font-weight: bold;
	}

	@media (max-width: 768px) {
		.mode-selector {
			flex-direction: column;
		}

		.mode-btn {
			width: 100%;
			justify-content: center;
		}

		.section-header {
			flex-direction: column;
			align-items: flex-start;
			gap: 1rem;
		}

		.section-actions {
			width: 100%;
		}

		.action-btn {
			flex: 1;
		}

		.convert-btn {
			width: 100%;
			justify-content: center;
		}
	}

	/* Light Mode (default) */
	.container {
		--bg-primary: #ffffff;
		--bg-secondary: #f8f9fa;
		--card-bg: #ffffff;
		--text-primary: #1a1a2e;
		--text-secondary: #6b7280;
		--border-color: rgba(139, 92, 246, 0.2);
	}

	/* Dark Mode */
	:global(.dark-mode) .container {
		--bg-primary: #0f172a;
		--bg-secondary: #1e293b;
		--card-bg: #1e293b;
		--text-primary: #f8fafc;
		--text-secondary: #cbd5e1;
		--border-color: #334155;
	}

	:global(.dark-mode) .input-section,
	:global(.dark-mode) .output-section,
	:global(.dark-mode) .info-card {
		background: #1e293b;
		border-color: #334155;
	}

	:global(.dark-mode) .text-area {
		background: #0f172a;
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .mode-selector {
		background: rgba(139, 92, 246, 0.1);
		border-color: #334155;
	}

	:global(.dark-mode) .mode-btn {
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .mode-btn:hover {
		background: rgba(139, 92, 246, 0.2);
		border-color: #8b5cf6;
		color: #f8fafc;
	}
</style>

<script>
	let currentMode: 'encode' | 'decode' = 'encode';

	// Elements
	const modeButtons = document.querySelectorAll('.mode-btn');
	const inputText = document.getElementById('inputText') as HTMLTextAreaElement;
	const outputText = document.getElementById('outputText') as HTMLTextAreaElement;
	const convertBtn = document.getElementById('convertBtn') as HTMLButtonElement;
	const clearInputBtn = document.getElementById('clearInputBtn') as HTMLButtonElement;
	const pasteBtn = document.getElementById('pasteBtn') as HTMLButtonElement;
	const copyBtn = document.getElementById('copyBtn') as HTMLButtonElement;
	const downloadBtn = document.getElementById('downloadBtn') as HTMLButtonElement;
	const inputCount = document.getElementById('inputCount') as HTMLSpanElement;
	const outputCount = document.getElementById('outputCount') as HTMLSpanElement;
	const inputLabel = document.getElementById('inputLabel') as HTMLHeadingElement;
	const outputLabel = document.getElementById('outputLabel') as HTMLHeadingElement;
	const convertBtnText = document.getElementById('convertBtnText') as HTMLSpanElement;

	// Mode switching
	modeButtons.forEach(btn => {
		btn.addEventListener('click', () => {
			modeButtons.forEach(b => b.classList.remove('active'));
			btn.classList.add('active');
			currentMode = btn.getAttribute('data-mode') as 'encode' | 'decode';
			updateLabels();
			clearAll();
		});
	});

	function updateLabels() {
		if (currentMode === 'encode') {
			inputLabel.textContent = 'Texto Original';
			outputLabel.textContent = 'Resultado Base64';
			convertBtnText.textContent = 'Codificar';
			inputText.placeholder = 'Escribe o pega tu texto aquí...';
		} else {
			inputLabel.textContent = 'Texto Base64';
			outputLabel.textContent = 'Texto Decodificado';
			convertBtnText.textContent = 'Decodificar';
			inputText.placeholder = 'Pega tu texto Base64 aquí...';
		}
	}

	// Character count
	inputText.addEventListener('input', () => {
		inputCount.textContent = inputText.value.length.toString();
	});

	// Convert
	convertBtn.addEventListener('click', () => {
		const input = inputText.value.trim();
		
		if (!input) {
			showNotification('Por favor, ingresa texto para convertir', 'error');
			return;
		}

		try {
			let result: string;
			
			if (currentMode === 'encode') {
				// Encode to Base64
				result = btoa(unescape(encodeURIComponent(input)));
			} else {
				// Decode from Base64
				result = decodeURIComponent(escape(atob(input)));
			}

			outputText.value = result;
			outputCount.textContent = result.length.toString();
			copyBtn.disabled = false;
			downloadBtn.disabled = false;
			showNotification('¡Conversión exitosa!', 'success');
		} catch (error) {
			showNotification('Error: Texto inválido para ' + (currentMode === 'encode' ? 'codificar' : 'decodificar'), 'error');
			console.error(error);
		}
	});

	// Clear input
	clearInputBtn.addEventListener('click', () => {
		clearAll();
		showNotification('Campo limpiado', 'info');
	});

	function clearAll() {
		inputText.value = '';
		outputText.value = '';
		inputCount.textContent = '0';
		outputCount.textContent = '0';
		copyBtn.disabled = true;
		downloadBtn.disabled = true;
	}

	// Paste
	pasteBtn.addEventListener('click', async () => {
		try {
			const text = await navigator.clipboard.readText();
			inputText.value = text;
			inputCount.textContent = text.length.toString();
			showNotification('Texto pegado', 'success');
		} catch (error) {
			showNotification('Error al pegar. Por favor, pega manualmente', 'error');
		}
	});

	// Copy
	copyBtn.addEventListener('click', async () => {
		try {
			await navigator.clipboard.writeText(outputText.value);
			showNotification('¡Copiado al portapapeles!', 'success');
		} catch (error) {
			// Fallback
			outputText.select();
			document.execCommand('copy');
			showNotification('¡Copiado al portapapeles!', 'success');
		}
	});

	// Download
	downloadBtn.addEventListener('click', () => {
		const text = outputText.value;
		const fileName = currentMode === 'encode' ? 'encoded.txt' : 'decoded.txt';
		const blob = new Blob([text], { type: 'text/plain' });
		const url = URL.createObjectURL(blob);
		const a = document.createElement('a');
		a.href = url;
		a.download = fileName;
		a.click();
		URL.revokeObjectURL(url);
		showNotification('¡Archivo descargado!', 'success');
	});

	// Notification system
	function showNotification(message: string, type: 'success' | 'error' | 'info') {
		const notification = document.createElement('div');
		notification.className = `notification notification-${type}`;
		notification.textContent = message;
		
		notification.style.cssText = `
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			background: ${type === 'success' ? '#10b981' : type === 'error' ? '#ef4444' : '#3b82f6'};
			color: white;
			border-radius: 8px;
			font-weight: 500;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
		`;

		document.body.appendChild(notification);

		setTimeout(() => {
			notification.style.animation = 'slideOut 0.3s ease';
			setTimeout(() => notification.remove(), 300);
		}, 3000);
	}

	// Add animations
	const style = document.createElement('style');
	style.textContent = `
		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}
		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}
	`;
	document.head.appendChild(style);
</script>
