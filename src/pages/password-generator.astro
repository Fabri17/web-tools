---
import Layout from '../layouts/Layout.astro';
import ToolHeader from '../components/ToolHeader.astro';

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<rect x="3" y="11" width="18" height="11" rx="2" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M7 11V7a5 5 0 0 1 10 0v4" stroke="url(#gradient1)" stroke-width="1.5"/>
		<circle cx="12" cy="16" r="1" fill="url(#gradient1)"/>
		<defs>
			<linearGradient id="gradient1" x1="3" y1="2" x2="21" y2="22" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout 
	title="Password Generator - Generador de Contraseñas Seguras | Gratis"
	description="Genera contraseñas seguras y aleatorias de forma gratuita. Personaliza longitud, caracteres especiales, números y mayúsculas. Verifica la fortaleza de tu contraseña."
	url="https://brix.center.com"
	image="/og-image.jpg"
>
	<main>
		<div class="container">
			<ToolHeader 
				title="Password Generator"
				subtitle="Genera contraseñas seguras y aleatorias al instante"
				icon={icon}
				showPrimaryButton={false}
			/>
			
			<div class="generator-container">
				<!-- Password Display -->
				<div class="password-display">
					<div class="password-box">
						<div class="password-text" id="passwordDisplay">Haz clic en "Generar" para crear una contraseña</div>
						<button class="icon-btn copy-btn" id="copyBtn" title="Copiar contraseña" disabled>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
								<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
							</svg>
						</button>
						<button class="icon-btn refresh-btn" id="refreshBtn" title="Regenerar">
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M1 4v6h6M23 20v-6h-6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								<path d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
						</button>
					</div>
					
					<!-- Strength Meter -->
					<div class="strength-meter">
						<div class="strength-label">
							<span>Fortaleza:</span>
							<span id="strengthText" class="strength-value">-</span>
						</div>
						<div class="strength-bar">
							<div id="strengthBar" class="strength-fill"></div>
						</div>
						<div id="crackTimeText" class="crack-time"></div>
					</div>
				</div>

				<!-- Options -->
				<div class="options-section">
					<div class="section-header">
						<h3>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
								<path d="M12 1v6m0 6v6M23 12h-6m-6 0H1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
							Opciones de Generación
						</h3>
					</div>

					<!-- Length Slider -->
					<div class="option-group">
						<div class="option-header">
							<label for="lengthSlider">Longitud de la contraseña</label>
							<span id="lengthValue" class="length-value">16</span>
						</div>
						<input 
							type="range" 
							id="lengthSlider" 
							min="8" 
							max="64" 
							value="16" 
							class="slider"
						/>
						<div class="slider-labels">
							<span>8</span>
							<span>64</span>
						</div>
					</div>

					<!-- Character Options -->
					<div class="character-options">
						<div class="option-item">
							<label class="checkbox-label">
								<input type="checkbox" id="uppercaseCheck" checked />
								<span class="checkbox-custom"></span>
								<span class="checkbox-text">
									<span class="option-title">Mayúsculas (A-Z)</span>
									<span class="option-example">ABCDEFGHIJKLMNOPQRSTUVWXYZ</span>
								</span>
							</label>
						</div>

						<div class="option-item">
							<label class="checkbox-label">
								<input type="checkbox" id="lowercaseCheck" checked />
								<span class="checkbox-custom"></span>
								<span class="checkbox-text">
									<span class="option-title">Minúsculas (a-z)</span>
									<span class="option-example">abcdefghijklmnopqrstuvwxyz</span>
								</span>
							</label>
						</div>

						<div class="option-item">
							<label class="checkbox-label">
								<input type="checkbox" id="numbersCheck" checked />
								<span class="checkbox-custom"></span>
								<span class="checkbox-text">
									<span class="option-title">Números (0-9)</span>
									<span class="option-example">0123456789</span>
								</span>
							</label>
						</div>

						<div class="option-item">
							<label class="checkbox-label">
								<input type="checkbox" id="symbolsCheck" checked />
								<span class="checkbox-custom"></span>
								<span class="checkbox-text">
									<span class="option-title">Símbolos</span>
									<span class="option-example">!@#$%^&*()_+-=[]{}|;:,.<>?</span>
								</span>
							</label>
						</div>

						<div class="option-item">
							<label class="checkbox-label">
								<input type="checkbox" id="ambiguousCheck" />
								<span class="checkbox-custom"></span>
								<span class="checkbox-text">
									<span class="option-title">Excluir caracteres ambiguos</span>
									<span class="option-example">Excluye: i, l, 1, L, o, 0, O</span>
								</span>
							</label>
						</div>
					</div>

					<!-- Generate Button -->
					<button class="generate-btn" id="generateBtn">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M13 2L3 14h9l-1 8 10-12h-9l1-8z" fill="currentColor"/>
						</svg>
						Generar Contraseña
					</button>
				</div>

				<!-- Security Tips -->
				<div class="tips-section">
					<div class="section-header">
						<h3>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z" stroke="currentColor" stroke-width="2"/>
								<path d="M12 11v6M12 7v.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
							Consejos de Seguridad
						</h3>
					</div>
					<div class="tips-grid">
						<div class="tip-card">
							<div class="tip-icon">🔒</div>
							<h4>Usa contraseñas únicas</h4>
							<p>Nunca reutilices la misma contraseña en diferentes sitios o servicios.</p>
						</div>
						<div class="tip-card">
							<div class="tip-icon">📏</div>
							<h4>Longitud mínima</h4>
							<p>Usa al menos 12 caracteres. Cuanto más larga, más segura será tu contraseña.</p>
						</div>
						<div class="tip-card">
							<div class="tip-icon">🔄</div>
							<h4>Cambia regularmente</h4>
							<p>Actualiza tus contraseñas importantes cada 3-6 meses.</p>
						</div>
						<div class="tip-card">
							<div class="tip-icon">💾</div>
							<h4>Usa un gestor de contraseñas</h4>
							<p>Almacena tus contraseñas de forma segura con herramientas como 1Password o Bitwarden.</p>
						</div>
						<div class="tip-card">
							<div class="tip-icon">🔐</div>
							<h4>Habilita 2FA</h4>
							<p>Añade una capa extra de seguridad con autenticación de dos factores.</p>
						</div>
						<div class="tip-card">
							<div class="tip-icon">⚠️</div>
							<h4>Cuidado con el phishing</h4>
							<p>Nunca compartas tu contraseña por email o mensaje. Las empresas legítimas nunca la pedirán.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>
</Layout>

<script>
	// Character sets
	const UPPERCASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
	const LOWERCASE = 'abcdefghijklmnopqrstuvwxyz';
	const NUMBERS = '0123456789';
	const SYMBOLS = '!@#$%^&*()_+-=[]{}|;:,.<>?';
	const AMBIGUOUS = 'il1Lo0O';

	let currentPassword = '';

	// DOM Elements
	const passwordDisplay = document.getElementById('passwordDisplay') as HTMLDivElement;
	const copyBtn = document.getElementById('copyBtn') as HTMLButtonElement;
	const refreshBtn = document.getElementById('refreshBtn') as HTMLButtonElement;
	const generateBtn = document.getElementById('generateBtn') as HTMLButtonElement;
	const lengthSlider = document.getElementById('lengthSlider') as HTMLInputElement;
	const lengthValue = document.getElementById('lengthValue') as HTMLSpanElement;
	const uppercaseCheck = document.getElementById('uppercaseCheck') as HTMLInputElement;
	const lowercaseCheck = document.getElementById('lowercaseCheck') as HTMLInputElement;
	const numbersCheck = document.getElementById('numbersCheck') as HTMLInputElement;
	const symbolsCheck = document.getElementById('symbolsCheck') as HTMLInputElement;
	const ambiguousCheck = document.getElementById('ambiguousCheck') as HTMLInputElement;
	const strengthText = document.getElementById('strengthText') as HTMLSpanElement;
	const strengthBar = document.getElementById('strengthBar') as HTMLDivElement;
	const crackTimeText = document.getElementById('crackTimeText') as HTMLDivElement;

	// Update length display
	lengthSlider.addEventListener('input', () => {
		lengthValue.textContent = lengthSlider.value;
	});

	// Generate password
	function generatePassword(): string {
		const length = parseInt(lengthSlider.value);
		let charset = '';

		if (uppercaseCheck.checked) charset += UPPERCASE;
		if (lowercaseCheck.checked) charset += LOWERCASE;
		if (numbersCheck.checked) charset += NUMBERS;
		if (symbolsCheck.checked) charset += SYMBOLS;

		if (ambiguousCheck.checked) {
			charset = charset.split('').filter(char => !AMBIGUOUS.includes(char)).join('');
		}

		if (charset.length === 0) {
			alert('Debes seleccionar al menos un tipo de carácter');
			return '';
		}

		// Generate secure random password
		const array = new Uint32Array(length);
		crypto.getRandomValues(array);
		
		let password = '';
		for (let i = 0; i < length; i++) {
			password += charset[array[i] % charset.length];
		}

		return password;
	}

	// Calculate password strength
	function calculateStrength(password: string): { score: number; label: string; color: string; crackTime: string } {
		if (!password) {
			return { score: 0, label: '-', color: '#e5e7eb', crackTime: '' };
		}

		let score = 0;
		const length = password.length;

		// Length score
		if (length >= 8) score += 1;
		if (length >= 12) score += 1;
		if (length >= 16) score += 1;
		if (length >= 20) score += 1;

		// Character variety
		if (/[a-z]/.test(password)) score += 1;
		if (/[A-Z]/.test(password)) score += 1;
		if (/[0-9]/.test(password)) score += 1;
		if (/[^a-zA-Z0-9]/.test(password)) score += 1;

		// Calculate entropy and crack time
		let charsetSize = 0;
		if (/[a-z]/.test(password)) charsetSize += 26;
		if (/[A-Z]/.test(password)) charsetSize += 26;
		if (/[0-9]/.test(password)) charsetSize += 10;
		if (/[^a-zA-Z0-9]/.test(password)) charsetSize += 32;

		const entropy = length * Math.log2(charsetSize);
		const crackTime = estimateCrackTime(entropy);

		// Determine strength
		if (score <= 3) {
			return { score: 25, label: 'Muy Débil', color: '#ef4444', crackTime };
		} else if (score <= 5) {
			return { score: 50, label: 'Débil', color: '#f97316', crackTime };
		} else if (score <= 6) {
			return { score: 75, label: 'Media', color: '#eab308', crackTime };
		} else if (score <= 7) {
			return { score: 90, label: 'Fuerte', color: '#84cc16', crackTime };
		} else {
			return { score: 100, label: 'Muy Fuerte', color: '#22c55e', crackTime };
		}
	}

	// Estimate crack time
	function estimateCrackTime(entropy: number): string {
		// Assuming 10 billion guesses per second
		const guessesPerSecond = 10_000_000_000;
		const possibleCombinations = Math.pow(2, entropy);
		const secondsToCrack = possibleCombinations / (2 * guessesPerSecond);

		if (secondsToCrack < 1) return 'Menos de 1 segundo';
		if (secondsToCrack < 60) return `${Math.round(secondsToCrack)} segundos`;
		if (secondsToCrack < 3600) return `${Math.round(secondsToCrack / 60)} minutos`;
		if (secondsToCrack < 86400) return `${Math.round(secondsToCrack / 3600)} horas`;
		if (secondsToCrack < 31536000) return `${Math.round(secondsToCrack / 86400)} días`;
		if (secondsToCrack < 31536000 * 1000) return `${Math.round(secondsToCrack / 31536000)} años`;
		if (secondsToCrack < 31536000 * 1000000) return `${Math.round(secondsToCrack / (31536000 * 1000))} mil años`;
		if (secondsToCrack < 31536000 * 1000000000) return `${Math.round(secondsToCrack / (31536000 * 1000000))} millones de años`;
		return 'Billones de años';
	}

	// Update strength display
	function updateStrengthDisplay(password: string) {
		const strength = calculateStrength(password);
		strengthText.textContent = strength.label;
		strengthBar.style.width = `${strength.score}%`;
		strengthBar.style.backgroundColor = strength.color;
		
		if (strength.crackTime) {
			crackTimeText.textContent = `Tiempo estimado para descifrar: ${strength.crackTime}`;
			crackTimeText.style.display = 'block';
		} else {
			crackTimeText.style.display = 'none';
		}
	}

	// Generate button handler
	generateBtn.addEventListener('click', () => {
		currentPassword = generatePassword();
		if (currentPassword) {
			passwordDisplay.textContent = currentPassword;
			passwordDisplay.classList.add('has-password');
			copyBtn.disabled = false;
			updateStrengthDisplay(currentPassword);
		}
	});

	// Refresh button handler
	refreshBtn.addEventListener('click', () => {
		if (currentPassword) {
			generateBtn.click();
		}
	});

	// Copy button handler
	copyBtn.addEventListener('click', async () => {
		try {
			await navigator.clipboard.writeText(currentPassword);
			
			// Visual feedback
			const originalHTML = copyBtn.innerHTML;
			copyBtn.innerHTML = `
				<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M20 6L9 17l-5-5" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
				</svg>
			`;
			copyBtn.classList.add('copied');
			
			setTimeout(() => {
				copyBtn.innerHTML = originalHTML;
				copyBtn.classList.remove('copied');
			}, 2000);
		} catch (err) {
			console.error('Error al copiar:', err);
			alert('Error al copiar la contraseña');
		}
	});

	// Auto-generate on page load
	window.addEventListener('DOMContentLoaded', () => {
		generateBtn.click();
	});
</script>

<style>
	.container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 2rem 1rem;
	}

	.generator-container {
		display: flex;
		flex-direction: column;
		gap: 2rem;
		margin-top: 2rem;
	}

	/* Password Display */
	.password-display {
		background: white;
		border: 1px solid #e4e4e7;
		border-radius: 16px;
		padding: 2rem;
	}

	.password-box {
		display: flex;
		align-items: center;
		gap: 1rem;
		padding: 1.5rem;
		background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
		border: 2px solid #e4e4e7;
		border-radius: 12px;
		margin-bottom: 1.5rem;
	}

	.password-text {
		flex: 1;
		font-family: 'Courier New', monospace;
		font-size: 1.25rem;
		font-weight: 600;
		color: #3f3f46;
		word-break: break-all;
		min-height: 1.5rem;
	}

	.password-text.has-password {
		color: #8b5cf6;
	}

	.icon-btn {
		background: white;
		border: 1px solid #e4e4e7;
		border-radius: 8px;
		padding: 0.625rem;
		cursor: pointer;
		transition: all 0.2s ease;
		color: #71717a;
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.icon-btn:hover:not(:disabled) {
		background: #f8fafc;
		border-color: #8b5cf6;
		color: #8b5cf6;
		transform: translateY(-2px);
	}

	.icon-btn:disabled {
		opacity: 0.5;
		cursor: not-allowed;
	}

	.icon-btn.copied {
		background: #22c55e;
		border-color: #22c55e;
		color: white;
	}

	/* Strength Meter */
	.strength-meter {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.strength-label {
		display: flex;
		justify-content: space-between;
		align-items: center;
		font-size: 0.875rem;
		color: #71717a;
	}

	.strength-value {
		font-weight: 600;
		color: #18181b;
	}

	.strength-bar {
		width: 100%;
		height: 8px;
		background: #f4f4f5;
		border-radius: 4px;
		overflow: hidden;
	}

	.strength-fill {
		height: 100%;
		width: 0%;
		transition: all 0.3s ease;
		border-radius: 4px;
	}

	.crack-time {
		font-size: 0.75rem;
		color: #71717a;
		display: none;
	}

	/* Options Section */
	.options-section {
		background: white;
		border: 1px solid #e4e4e7;
		border-radius: 16px;
		padding: 2rem;
	}

	.section-header {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		margin-bottom: 1.5rem;
	}

	.section-header h3 {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		font-size: 1.125rem;
		font-weight: 600;
		color: #18181b;
		margin: 0;
	}

	.section-header svg {
		color: #8b5cf6;
	}

	.option-group {
		margin-bottom: 2rem;
	}

	.option-header {
		display: flex;
		justify-content: space-between;
		align-items: center;
		margin-bottom: 1rem;
	}

	.option-header label {
		font-size: 0.875rem;
		font-weight: 500;
		color: #18181b;
	}

	.length-value {
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		color: white;
		padding: 0.25rem 0.75rem;
		border-radius: 20px;
		font-size: 0.875rem;
		font-weight: 600;
	}

	.slider {
		width: 100%;
		height: 6px;
		border-radius: 3px;
		background: #f4f4f5;
		outline: none;
		-webkit-appearance: none;
		margin-bottom: 0.5rem;
	}

	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		cursor: pointer;
		box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
	}

	.slider::-moz-range-thumb {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		cursor: pointer;
		box-shadow: 0 2px 8px rgba(139, 92, 246, 0.3);
		border: none;
	}

	.slider-labels {
		display: flex;
		justify-content: space-between;
		font-size: 0.75rem;
		color: #a1a1aa;
	}

	/* Character Options */
	.character-options {
		display: flex;
		flex-direction: column;
		gap: 1rem;
		margin-bottom: 2rem;
	}

	.option-item {
		padding: 1rem;
		background: #fafafa;
		border: 1px solid #f4f4f5;
		border-radius: 8px;
		transition: all 0.2s ease;
	}

	.option-item:hover {
		background: #f8fafc;
		border-color: #e4e4e7;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		gap: 1rem;
		cursor: pointer;
	}

	.checkbox-label input[type="checkbox"] {
		display: none;
	}

	.checkbox-custom {
		width: 20px;
		height: 20px;
		border: 2px solid #d4d4d8;
		border-radius: 4px;
		position: relative;
		transition: all 0.2s ease;
		flex-shrink: 0;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkbox-custom {
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		border-color: #8b5cf6;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkbox-custom::after {
		content: '';
		position: absolute;
		top: 2px;
		left: 6px;
		width: 4px;
		height: 8px;
		border: solid white;
		border-width: 0 2px 2px 0;
		transform: rotate(45deg);
	}

	.checkbox-text {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		flex: 1;
	}

	.option-title {
		font-size: 0.875rem;
		font-weight: 500;
		color: #18181b;
	}

	.option-example {
		font-size: 0.75rem;
		color: #a1a1aa;
		font-family: 'Courier New', monospace;
	}

	/* Generate Button */
	.generate-btn {
		width: 100%;
		padding: 1rem 2rem;
		background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
		color: white;
		border: none;
		border-radius: 12px;
		font-size: 1rem;
		font-weight: 600;
		cursor: pointer;
		transition: all 0.3s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		box-shadow: 0 4px 16px rgba(139, 92, 246, 0.3);
	}

	.generate-btn:hover {
		transform: translateY(-2px);
		box-shadow: 0 8px 24px rgba(139, 92, 246, 0.4);
	}

	.generate-btn:active {
		transform: translateY(0);
	}

	/* Tips Section */
	.tips-section {
		background: white;
		border: 1px solid #e4e4e7;
		border-radius: 16px;
		padding: 2rem;
	}

	.tips-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
		gap: 1.5rem;
	}

	.tip-card {
		padding: 1.5rem;
		background: linear-gradient(135deg, #fafafa 0%, #f8fafc 100%);
		border: 1px solid #f4f4f5;
		border-radius: 12px;
		transition: all 0.3s ease;
	}

	.tip-card:hover {
		transform: translateY(-4px);
		box-shadow: 0 8px 24px rgba(0, 0, 0, 0.06);
		border-color: #e4e4e7;
	}

	.tip-icon {
		font-size: 2rem;
		margin-bottom: 1rem;
	}

	.tip-card h4 {
		font-size: 1rem;
		font-weight: 600;
		color: #18181b;
		margin: 0 0 0.5rem 0;
	}

	.tip-card p {
		font-size: 0.875rem;
		color: #71717a;
		margin: 0;
		line-height: 1.6;
	}

	/* Dark Mode */
	:global(.dark-mode) .password-display,
	:global(.dark-mode) .options-section,
	:global(.dark-mode) .tips-section {
		background: #1e293b;
		border-color: #334155;
	}

	:global(.dark-mode) .password-box {
		background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
		border-color: #334155;
	}

	:global(.dark-mode) .password-text {
		color: #cbd5e1;
	}

	:global(.dark-mode) .password-text.has-password {
		color: #c084fc;
	}

	:global(.dark-mode) .icon-btn {
		background: #0f172a;
		border-color: #334155;
		color: #cbd5e1;
	}

	:global(.dark-mode) .icon-btn:hover:not(:disabled) {
		background: #1e293b;
		border-color: #8b5cf6;
		color: #c084fc;
	}

	:global(.dark-mode) .strength-label,
	:global(.dark-mode) .crack-time {
		color: #94a3b8;
	}

	:global(.dark-mode) .strength-value,
	:global(.dark-mode) .option-header label,
	:global(.dark-mode) .option-title,
	:global(.dark-mode) .section-header h3,
	:global(.dark-mode) .tip-card h4 {
		color: #f1f5f9;
	}

	:global(.dark-mode) .strength-bar {
		background: #334155;
	}

	:global(.dark-mode) .option-item {
		background: #0f172a;
		border-color: #334155;
	}

	:global(.dark-mode) .option-item:hover {
		background: #1e293b;
		border-color: #475569;
	}

	:global(.dark-mode) .checkbox-custom {
		border-color: #475569;
	}

	:global(.dark-mode) .option-example {
		color: #64748b;
	}

	:global(.dark-mode) .tip-card {
		background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
		border-color: #334155;
	}

	:global(.dark-mode) .tip-card p {
		color: #94a3b8;
	}

	@media (max-width: 768px) {
		.password-box {
			flex-direction: column;
			align-items: stretch;
		}

		.password-text {
			font-size: 1rem;
			text-align: center;
		}

		.icon-btn {
			width: 100%;
		}

		.tips-grid {
			grid-template-columns: 1fr;
		}
	}
</style>
