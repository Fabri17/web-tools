---
import Layout from '../layouts/Layout.astro';
import ToolHeader from '../components/ToolHeader.astro';

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<rect x="4" y="4" width="16" height="16" rx="2" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M9 4v16M15 4v16M4 9h16M4 15h16" stroke="url(#gradient1)" stroke-width="1.5"/>
		<defs>
			<linearGradient id="gradient1" x1="4" y1="4" x2="20" y2="20" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout 
	title="Hash Generator - Generador de Hash Online | MD5, SHA-256, SHA-512"
	description="Genera hashes criptográficos de forma segura y gratuita. Soporta MD5, SHA-1, SHA-256, SHA-512 y más. Procesamiento 100% local en tu navegador."
	url="https://brix.center.com/hash-generator"
	image="/og-image.jpg"
>
	<main>
		<div class="container">
			<ToolHeader 
				title="Hash Generator"
				subtitle="Genera hashes criptográficos de forma segura y local"
				icon={icon}
				showPrimaryButton={false}
			/>
			
			<div class="generator-container">
				<!-- Input Section -->
				<div class="input-section">
					<div class="section-header">
						<h3>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M12 20h9M16.5 3.5a2.121 2.121 0 0 1 3 3L7 19l-4 1 1-4L16.5 3.5z" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
							Texto de Entrada
						</h3>
					</div>
					
					<div class="input-group">
						<label for="inputText">
							<span class="label-text">Ingresa el texto que deseas hashear</span>
						</label>
						<textarea 
							id="inputText" 
							placeholder="Escribe o pega tu texto aquí..."
							rows="6"
							aria-label="Texto para generar hash"
						></textarea>
						<div class="input-info">
							<span id="charCount" class="char-count">0 caracteres</span>
							<button class="text-btn" id="clearBtn">
								<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
									<path d="M18 6L6 18M6 6l12 12" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
								</svg>
								Limpiar
							</button>
						</div>
					</div>
				</div>

				<!-- Hash Options -->
				<div class="options-section">
					<div class="section-header">
						<h3>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<circle cx="12" cy="12" r="3" stroke="currentColor" stroke-width="2"/>
								<path d="M12 1v6m0 6v6M23 12h-6m-6 0H1" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
							Algoritmos de Hash
						</h3>
					</div>
					
					<div class="hash-options">
						<label class="hash-option">
							<input type="checkbox" name="hashType" value="MD5" checked />
							<span class="option-label">
								<span class="option-name">MD5</span>
								<span class="option-desc">128-bit (obsoleto, solo para compatibilidad)</span>
							</span>
						</label>
						
						<label class="hash-option">
							<input type="checkbox" name="hashType" value="SHA-1" checked />
							<span class="option-label">
								<span class="option-name">SHA-1</span>
								<span class="option-desc">160-bit (obsoleto, uso limitado)</span>
							</span>
						</label>
						
						<label class="hash-option">
							<input type="checkbox" name="hashType" value="SHA-256" checked />
							<span class="option-label">
								<span class="option-name">SHA-256</span>
								<span class="option-desc">256-bit (recomendado, muy seguro)</span>
							</span>
						</label>
						
						<label class="hash-option">
							<input type="checkbox" name="hashType" value="SHA-384" checked />
							<span class="option-label">
								<span class="option-name">SHA-384</span>
								<span class="option-desc">384-bit (alta seguridad)</span>
							</span>
						</label>
						
						<label class="hash-option">
							<input type="checkbox" name="hashType" value="SHA-512" checked />
							<span class="option-label">
								<span class="option-name">SHA-512</span>
								<span class="option-desc">512-bit (máxima seguridad)</span>
							</span>
						</label>
					</div>
					
					<button class="btn-primary" id="generateBtn">
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M21 12a9 9 0 1 1-9-9" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							<path d="M12 3v9l4 4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
						</svg>
						Generar Hashes
					</button>
				</div>

				<!-- Results Section -->
				<div class="results-section" id="resultsSection" style="display: none;">
					<div class="section-header">
						<h3>
							<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M9 11l3 3L22 4" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
								<path d="M21 12v7a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
							</svg>
							Resultados
						</h3>
					</div>
					
					<div class="results-container" id="resultsContainer">
						<!-- Results will be inserted here -->
					</div>
				</div>

				<!-- Info Section -->
				<div class="info-section">
					<div class="info-card">
						<div class="info-icon">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="2"/>
								<path d="M12 16v-4M12 8h.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
						</div>
						<div class="info-content">
							<h4>Procesamiento 100% Local</h4>
							<p>Tus datos nunca salen de tu navegador. Todo el procesamiento ocurre localmente usando Web Crypto API.</p>
						</div>
					</div>
					
					<div class="info-card">
						<div class="info-icon">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<rect x="3" y="11" width="18" height="11" rx="2" stroke="currentColor" stroke-width="2"/>
								<path d="M7 11V7a5 5 0 0 1 10 0v4" stroke="currentColor" stroke-width="2"/>
							</svg>
						</div>
						<div class="info-content">
							<h4>Seguridad y Privacidad</h4>
							<p>No se almacena ninguna información. Los hashes se generan en tiempo real y de forma completamente privada.</p>
						</div>
					</div>
					
					<div class="info-card warning">
						<div class="info-icon">
							<svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
								<path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" stroke="currentColor" stroke-width="2"/>
								<line x1="12" y1="9" x2="12" y2="13" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
								<line x1="12" y1="17" x2="12.01" y2="17" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							</svg>
						</div>
						<div class="info-content">
							<h4>Importante sobre MD5 y SHA-1</h4>
							<p>MD5 y SHA-1 son obsoletos para uso criptográfico. Úsalos solo para verificación de integridad no crítica. Para seguridad, usa SHA-256 o superior.</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</main>

	<style>
		.container {
			max-width: 1200px;
			margin: 0 auto;
			padding: 2rem 1rem;
		}

		.generator-container {
			display: flex;
			flex-direction: column;
			gap: 2rem;
			margin-top: 2rem;
		}

		/* Section Headers */
		.section-header {
			margin-bottom: 1.5rem;
		}

		.section-header h3 {
			display: flex;
			align-items: center;
			gap: 0.75rem;
			font-size: 1.25rem;
			font-weight: 600;
			color: var(--text-primary, #18181b);
			margin: 0;
		}

		.section-header h3 svg {
			color: var(--accent-primary, #8b5cf6);
		}

		/* Input Section */
		.input-section {
			background: white;
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 16px;
			padding: 2rem;
			transition: all 0.3s ease;
		}

		.input-group {
			display: flex;
			flex-direction: column;
			gap: 0.75rem;
		}

		.input-group label {
			display: block;
		}

		.label-text {
			font-size: 0.875rem;
			font-weight: 500;
			color: var(--text-secondary, #71717a);
		}

		textarea {
			width: 100%;
			padding: 1rem;
			font-size: 1rem;
			font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
			color: var(--text-primary, #18181b);
			background: var(--surface, #fafafa);
			border: 2px solid var(--border-color, #e4e4e7);
			border-radius: 12px;
			resize: vertical;
			transition: all 0.3s ease;
			min-height: 150px;
		}

		textarea:focus {
			outline: none;
			border-color: var(--accent-primary, #8b5cf6);
			box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
		}

		.input-info {
			display: flex;
			justify-content: space-between;
			align-items: center;
			font-size: 0.875rem;
		}

		.char-count {
			color: var(--text-secondary, #71717a);
		}

		.text-btn {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			padding: 0.5rem 0.75rem;
			font-size: 0.875rem;
			font-weight: 500;
			color: var(--accent-primary, #8b5cf6);
			background: transparent;
			border: none;
			border-radius: 8px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		.text-btn:hover {
			background: rgba(139, 92, 246, 0.1);
		}

		/* Options Section */
		.options-section {
			background: white;
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 16px;
			padding: 2rem;
		}

		.hash-options {
			display: flex;
			flex-direction: column;
			gap: 1rem;
			margin-bottom: 1.5rem;
		}

		.hash-option {
			display: flex;
			align-items: flex-start;
			gap: 1rem;
			padding: 1rem;
			background: var(--surface, #fafafa);
			border: 2px solid transparent;
			border-radius: 12px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		.hash-option:hover {
			border-color: var(--accent-secondary, #c084fc);
			background: white;
		}

		.hash-option input[type="checkbox"] {
			width: 20px;
			height: 20px;
			margin-top: 2px;
			cursor: pointer;
			accent-color: var(--accent-primary, #8b5cf6);
		}

		.option-label {
			display: flex;
			flex-direction: column;
			gap: 0.25rem;
			flex: 1;
		}

		.option-name {
			font-weight: 600;
			font-size: 1rem;
			color: var(--text-primary, #18181b);
		}

		.option-desc {
			font-size: 0.875rem;
			color: var(--text-secondary, #71717a);
		}

		/* Buttons */
		.btn-primary {
			display: flex;
			align-items: center;
			justify-content: center;
			gap: 0.75rem;
			width: 100%;
			padding: 1rem 1.5rem;
			font-size: 1rem;
			font-weight: 600;
			color: white;
			background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
			border: none;
			border-radius: 12px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		.btn-primary:hover:not(:disabled) {
			transform: translateY(-2px);
			box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
		}

		.btn-primary:active:not(:disabled) {
			transform: translateY(0);
		}

		.btn-primary:disabled {
			opacity: 0.5;
			cursor: not-allowed;
		}

		/* Results Section */
		.results-section {
			background: white;
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 16px;
			padding: 2rem;
			animation: fadeIn 0.3s ease;
		}

		@keyframes fadeIn {
			from {
				opacity: 0;
				transform: translateY(10px);
			}
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.results-container {
			display: flex;
			flex-direction: column;
			gap: 1rem;
		}

		/* Estilos globales para elementos generados dinámicamente */
		:global(.result-card) {
			display: flex;
			flex-direction: column;
			gap: 0.75rem;
			padding: 1.5rem;
			background: var(--surface, #fafafa);
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 12px;
			transition: all 0.3s ease;
		}

		:global(.result-card:hover) {
			border-color: var(--accent-secondary, #c084fc);
		}

		:global(.result-header) {
			display: flex;
			justify-content: space-between;
			align-items: center;
		}

		:global(.result-algorithm) {
			font-weight: 600;
			font-size: 1rem;
			color: var(--accent-primary, #8b5cf6);
		}

		:global(.copy-btn) {
			display: flex;
			align-items: center;
			gap: 0.5rem;
			padding: 0.5rem 1rem;
			font-size: 0.875rem;
			font-weight: 500;
			color: var(--accent-primary, #8b5cf6);
			background: white;
			border: 1px solid var(--accent-primary, #8b5cf6);
			border-radius: 8px;
			cursor: pointer;
			transition: all 0.3s ease;
		}

		:global(.copy-btn:hover) {
			background: var(--accent-primary, #8b5cf6);
			color: white;
			transform: translateY(-2px);
			box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
		}

		:global(.copy-btn.copied) {
			background: #10b981;
			border-color: #10b981;
			color: white;
		}

		:global(.result-hash) {
			font-family: 'Monaco', 'Menlo', 'Courier New', monospace;
			font-size: 0.875rem;
			color: var(--text-primary, #18181b);
			word-break: break-all;
			padding: 0.75rem;
			background: white;
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 8px;
		}

		/* Info Section */
		.info-section {
			display: grid;
			grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
			gap: 1.5rem;
			margin-top: 1rem;
		}

		.info-card {
			display: flex;
			gap: 1rem;
			padding: 1.5rem;
			background: white;
			border: 1px solid var(--border-color, #e4e4e7);
			border-radius: 12px;
		}

		.info-card.warning {
			background: #fef3c7;
			border-color: #fbbf24;
		}

		.info-icon {
			flex-shrink: 0;
			width: 48px;
			height: 48px;
			display: flex;
			align-items: center;
			justify-content: center;
			background: var(--accent-primary, #8b5cf6);
			color: white;
			border-radius: 12px;
		}

		.info-card.warning .info-icon {
			background: #fbbf24;
		}

		.info-content h4 {
			font-size: 1rem;
			font-weight: 600;
			color: var(--text-primary, #18181b);
			margin: 0 0 0.5rem 0;
		}

		.info-content p {
			font-size: 0.875rem;
			color: var(--text-secondary, #71717a);
			margin: 0;
			line-height: 1.5;
		}

		/* Dark Mode */
		:global(.dark-mode) .input-section,
		:global(.dark-mode) .options-section,
		:global(.dark-mode) .results-section,
		:global(.dark-mode) .info-card {
			background: var(--surface, #1e293b);
			border-color: var(--border-color, #334155);
		}

		:global(.dark-mode) .section-header h3,
		:global(.dark-mode) .option-name,
		:global(.dark-mode) .result-hash,
		:global(.dark-mode) .info-content h4 {
			color: var(--text-primary, #f8fafc);
		}

		:global(.dark-mode) .label-text,
		:global(.dark-mode) .char-count,
		:global(.dark-mode) .option-desc,
		:global(.dark-mode) .info-content p {
			color: var(--text-secondary, #cbd5e1);
		}

		:global(.dark-mode) textarea {
			background: #0f172a;
			color: var(--text-primary, #f8fafc);
			border-color: var(--border-color, #334155);
		}

		:global(.dark-mode) .hash-option {
			background: #0f172a;
		}

		:global(.dark-mode) .hash-option:hover {
			background: var(--surface, #1e293b);
		}

		:global(.dark-mode) :global(.result-card) {
			background: #0f172a;
		}

		:global(.dark-mode) :global(.result-hash) {
			background: var(--surface, #1e293b);
			color: var(--text-primary, #f8fafc);
		}

		:global(.dark-mode) :global(.copy-btn) {
			background: var(--surface, #1e293b);
			color: var(--accent-primary, #8b5cf6);
			border-color: var(--accent-primary, #8b5cf6);
		}

		:global(.dark-mode) :global(.copy-btn:hover) {
			background: var(--accent-primary, #8b5cf6);
			color: white;
		}

		:global(.dark-mode) .info-card.warning {
			background: #78350f;
			border-color: #92400e;
		}

		/* Responsive */
		@media (max-width: 640px) {
			.container {
				padding: 1rem;
			}

			.input-section,
			.options-section,
			.results-section {
				padding: 1.5rem;
			}

			.info-section {
				grid-template-columns: 1fr;
			}

			.result-header {
				flex-direction: column;
				align-items: flex-start;
				gap: 0.75rem;
			}

			:global(.copy-btn) {
				width: 100%;
				justify-content: center;
			}
		}

		/* Animaciones */
		@keyframes spin {
			from { transform: rotate(0deg); }
			to { transform: rotate(360deg); }
		}

		:global(.spin) {
			animation: spin 1s linear infinite;
		}

		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}

		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}

		/* Toast notifications (generadas dinámicamente) */
		:global(.toast) {
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			color: white;
			border-radius: 12px;
			font-weight: 500;
			box-shadow: 0 8px 24px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
		}

		:global(.toast-success) {
			background: #10b981;
		}

		:global(.toast-error) {
			background: #ef4444;
		}

		@media (max-width: 640px) {
			:global(.toast) {
				left: 1rem;
				right: 1rem;
				bottom: 1rem;
			}
		}
	</style>

	<script>
		// MD5 implementation (since it's not in Web Crypto API)
		function md5(str: string): string {
			function rotateLeft(value: number, shift: number): number {
				return (value << shift) | (value >>> (32 - shift));
			}

			function addUnsigned(x: number, y: number): number {
				const x8 = (x & 0x80000000);
				const y8 = (y & 0x80000000);
				const x4 = (x & 0x40000000);
				const y4 = (y & 0x40000000);
				const result = (x & 0x3FFFFFFF) + (y & 0x3FFFFFFF);
				
				if (x4 & y4) return (result ^ 0x80000000 ^ x8 ^ y8);
				if (x4 | y4) {
					if (result & 0x40000000) return (result ^ 0xC0000000 ^ x8 ^ y8);
					else return (result ^ 0x40000000 ^ x8 ^ y8);
				} else return (result ^ x8 ^ y8);
			}

			function F(x: number, y: number, z: number): number { return (x & y) | ((~x) & z); }
			function G(x: number, y: number, z: number): number { return (x & z) | (y & (~z)); }
			function H(x: number, y: number, z: number): number { return (x ^ y ^ z); }
			function I(x: number, y: number, z: number): number { return (y ^ (x | (~z))); }

			function FF(a: number, b: number, c: number, d: number, x: number, s: number, ac: number): number {
				a = addUnsigned(a, addUnsigned(addUnsigned(F(b, c, d), x), ac));
				return addUnsigned(rotateLeft(a, s), b);
			}

			function GG(a: number, b: number, c: number, d: number, x: number, s: number, ac: number): number {
				a = addUnsigned(a, addUnsigned(addUnsigned(G(b, c, d), x), ac));
				return addUnsigned(rotateLeft(a, s), b);
			}

			function HH(a: number, b: number, c: number, d: number, x: number, s: number, ac: number): number {
				a = addUnsigned(a, addUnsigned(addUnsigned(H(b, c, d), x), ac));
				return addUnsigned(rotateLeft(a, s), b);
			}

			function II(a: number, b: number, c: number, d: number, x: number, s: number, ac: number): number {
				a = addUnsigned(a, addUnsigned(addUnsigned(I(b, c, d), x), ac));
				return addUnsigned(rotateLeft(a, s), b);
			}

			function convertToWordArray(str: string): number[] {
				const wordArray: number[] = [];
				const strLength = str.length;
				const numberOfWords = (((strLength + 8) - ((strLength + 8) % 64)) / 64 + 1) * 16;
				
				for (let i = 0; i < numberOfWords; i++) wordArray[i] = 0;
				for (let i = 0; i < strLength; i++) {
					wordArray[i >> 2] |= (str.charCodeAt(i) & 0xFF) << ((i % 4) * 8);
				}
				
				wordArray[strLength >> 2] |= 0x80 << ((strLength % 4) * 8);
				wordArray[numberOfWords - 2] = strLength << 3;
				
				return wordArray;
			}

			function wordToHex(value: number): string {
				let hex = '', byte;
				for (let i = 0; i <= 3; i++) {
					byte = (value >>> (i * 8)) & 0xFF;
					hex += ('0' + byte.toString(16)).slice(-2);
				}
				return hex;
			}

			const x = convertToWordArray(str);
			let a = 0x67452301, b = 0xEFCDAB89, c = 0x98BADCFE, d = 0x10325476;
			
			const S11 = 7, S12 = 12, S13 = 17, S14 = 22;
			const S21 = 5, S22 = 9, S23 = 14, S24 = 20;
			const S31 = 4, S32 = 11, S33 = 16, S34 = 23;
			const S41 = 6, S42 = 10, S43 = 15, S44 = 21;

			for (let k = 0; k < x.length; k += 16) {
				const AA = a, BB = b, CC = c, DD = d;

				a = FF(a, b, c, d, x[k + 0], S11, 0xD76AA478);
				d = FF(d, a, b, c, x[k + 1], S12, 0xE8C7B756);
				c = FF(c, d, a, b, x[k + 2], S13, 0x242070DB);
				b = FF(b, c, d, a, x[k + 3], S14, 0xC1BDCEEE);
				a = FF(a, b, c, d, x[k + 4], S11, 0xF57C0FAF);
				d = FF(d, a, b, c, x[k + 5], S12, 0x4787C62A);
				c = FF(c, d, a, b, x[k + 6], S13, 0xA8304613);
				b = FF(b, c, d, a, x[k + 7], S14, 0xFD469501);
				a = FF(a, b, c, d, x[k + 8], S11, 0x698098D8);
				d = FF(d, a, b, c, x[k + 9], S12, 0x8B44F7AF);
				c = FF(c, d, a, b, x[k + 10], S13, 0xFFFF5BB1);
				b = FF(b, c, d, a, x[k + 11], S14, 0x895CD7BE);
				a = FF(a, b, c, d, x[k + 12], S11, 0x6B901122);
				d = FF(d, a, b, c, x[k + 13], S12, 0xFD987193);
				c = FF(c, d, a, b, x[k + 14], S13, 0xA679438E);
				b = FF(b, c, d, a, x[k + 15], S14, 0x49B40821);

				a = GG(a, b, c, d, x[k + 1], S21, 0xF61E2562);
				d = GG(d, a, b, c, x[k + 6], S22, 0xC040B340);
				c = GG(c, d, a, b, x[k + 11], S23, 0x265E5A51);
				b = GG(b, c, d, a, x[k + 0], S24, 0xE9B6C7AA);
				a = GG(a, b, c, d, x[k + 5], S21, 0xD62F105D);
				d = GG(d, a, b, c, x[k + 10], S22, 0x2441453);
				c = GG(c, d, a, b, x[k + 15], S23, 0xD8A1E681);
				b = GG(b, c, d, a, x[k + 4], S24, 0xE7D3FBC8);
				a = GG(a, b, c, d, x[k + 9], S21, 0x21E1CDE6);
				d = GG(d, a, b, c, x[k + 14], S22, 0xC33707D6);
				c = GG(c, d, a, b, x[k + 3], S23, 0xF4D50D87);
				b = GG(b, c, d, a, x[k + 8], S24, 0x455A14ED);
				a = GG(a, b, c, d, x[k + 13], S21, 0xA9E3E905);
				d = GG(d, a, b, c, x[k + 2], S22, 0xFCEFA3F8);
				c = GG(c, d, a, b, x[k + 7], S23, 0x676F02D9);
				b = GG(b, c, d, a, x[k + 12], S24, 0x8D2A4C8A);

				a = HH(a, b, c, d, x[k + 5], S31, 0xFFFA3942);
				d = HH(d, a, b, c, x[k + 8], S32, 0x8771F681);
				c = HH(c, d, a, b, x[k + 11], S33, 0x6D9D6122);
				b = HH(b, c, d, a, x[k + 14], S34, 0xFDE5380C);
				a = HH(a, b, c, d, x[k + 1], S31, 0xA4BEEA44);
				d = HH(d, a, b, c, x[k + 4], S32, 0x4BDECFA9);
				c = HH(c, d, a, b, x[k + 7], S33, 0xF6BB4B60);
				b = HH(b, c, d, a, x[k + 10], S34, 0xBEBFBC70);
				a = HH(a, b, c, d, x[k + 13], S31, 0x289B7EC6);
				d = HH(d, a, b, c, x[k + 0], S32, 0xEAA127FA);
				c = HH(c, d, a, b, x[k + 3], S33, 0xD4EF3085);
				b = HH(b, c, d, a, x[k + 6], S34, 0x4881D05);
				a = HH(a, b, c, d, x[k + 9], S31, 0xD9D4D039);
				d = HH(d, a, b, c, x[k + 12], S32, 0xE6DB99E5);
				c = HH(c, d, a, b, x[k + 15], S33, 0x1FA27CF8);
				b = HH(b, c, d, a, x[k + 2], S34, 0xC4AC5665);

				a = II(a, b, c, d, x[k + 0], S41, 0xF4292244);
				d = II(d, a, b, c, x[k + 7], S42, 0x432AFF97);
				c = II(c, d, a, b, x[k + 14], S43, 0xAB9423A7);
				b = II(b, c, d, a, x[k + 5], S44, 0xFC93A039);
				a = II(a, b, c, d, x[k + 12], S41, 0x655B59C3);
				d = II(d, a, b, c, x[k + 3], S42, 0x8F0CCC92);
				c = II(c, d, a, b, x[k + 10], S43, 0xFFEFF47D);
				b = II(b, c, d, a, x[k + 1], S44, 0x85845DD1);
				a = II(a, b, c, d, x[k + 8], S41, 0x6FA87E4F);
				d = II(d, a, b, c, x[k + 15], S42, 0xFE2CE6E0);
				c = II(c, d, a, b, x[k + 6], S43, 0xA3014314);
				b = II(b, c, d, a, x[k + 13], S44, 0x4E0811A1);
				a = II(a, b, c, d, x[k + 4], S41, 0xF7537E82);
				d = II(d, a, b, c, x[k + 11], S42, 0xBD3AF235);
				c = II(c, d, a, b, x[k + 2], S43, 0x2AD7D2BB);
				b = II(b, c, d, a, x[k + 9], S44, 0xEB86D391);

				a = addUnsigned(a, AA);
				b = addUnsigned(b, BB);
				c = addUnsigned(c, CC);
				d = addUnsigned(d, DD);
			}

			return (wordToHex(a) + wordToHex(b) + wordToHex(c) + wordToHex(d)).toLowerCase();
		}

		// SHA algorithms using Web Crypto API
		async function generateHash(algorithm: string, text: string): Promise<string> {
			if (algorithm === 'MD5') {
				return md5(text);
			}

			const encoder = new TextEncoder();
			const data = encoder.encode(text);
			const hashBuffer = await crypto.subtle.digest(algorithm, data);
			const hashArray = Array.from(new Uint8Array(hashBuffer));
			return hashArray.map(b => b.toString(16).padStart(2, '0')).join('');
		}

		// Show toast notification
		function showToast(message: string, type: 'success' | 'error' = 'success') {
			const toast = document.createElement('div');
			toast.className = `toast toast-${type}`;
			toast.textContent = message;
			
			document.body.appendChild(toast);
			setTimeout(() => {
				toast.style.animation = 'slideOut 0.3s ease';
				setTimeout(() => toast.remove(), 300);
			}, 3000);
		}

		// Copy to clipboard
		async function copyToClipboard(text: string, button: HTMLElement) {
			try {
				await navigator.clipboard.writeText(text);
				const originalText = button.textContent;
				button.textContent = '✓ Copiado';
				button.classList.add('copied');
				
				setTimeout(() => {
					button.textContent = originalText;
					button.classList.remove('copied');
				}, 2000);
				
				showToast('Hash copiado al portapapeles');
			} catch (error) {
				showToast('Error al copiar', 'error');
			}
		}

		document.addEventListener('DOMContentLoaded', () => {
			const inputText = document.getElementById('inputText') as HTMLTextAreaElement;
			const charCount = document.getElementById('charCount') as HTMLElement;
			const clearBtn = document.getElementById('clearBtn') as HTMLButtonElement;
			const generateBtn = document.getElementById('generateBtn') as HTMLButtonElement;
			const resultsSection = document.getElementById('resultsSection') as HTMLElement;
			const resultsContainer = document.getElementById('resultsContainer') as HTMLElement;

			// Update character count
			inputText?.addEventListener('input', () => {
				const count = inputText.value.length;
				if (charCount) {
					charCount.textContent = `${count} caracter${count !== 1 ? 'es' : ''}`;
				}
			});

			// Clear input
			clearBtn?.addEventListener('click', () => {
				if (inputText) {
					inputText.value = '';
					inputText.focus();
					if (charCount) {
						charCount.textContent = '0 caracteres';
					}
				}
			});

			// Generate hashes
			generateBtn?.addEventListener('click', async () => {
				const text = inputText?.value?.trim();
				
				if (!text) {
					showToast('Por favor, ingresa algún texto', 'error');
					inputText?.focus();
					return;
				}

				// Get selected algorithms
				const checkboxes = document.querySelectorAll('input[name="hashType"]:checked') as NodeListOf<HTMLInputElement>;
				
				if (checkboxes.length === 0) {
					showToast('Selecciona al menos un algoritmo', 'error');
					return;
				}

				// Disable button
				generateBtn.disabled = true;
				generateBtn.innerHTML = `
					<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" class="spin">
						<path d="M12 2v4m0 12v4M4.93 4.93l2.83 2.83m8.48 8.48l2.83 2.83M2 12h4m12 0h4M4.93 19.07l2.83-2.83m8.48-8.48l2.83-2.83" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
					</svg>
					Generando...
				`;

				try {
					resultsContainer.innerHTML = '';
					
					const algorithmMap: Record<string, string> = {
						'MD5': 'MD5',
						'SHA-1': 'SHA-1',
						'SHA-256': 'SHA-256',
						'SHA-384': 'SHA-384',
						'SHA-512': 'SHA-512'
					};

					for (const checkbox of checkboxes) {
						const algorithm = algorithmMap[checkbox.value];
						const hash = await generateHash(algorithm, text);
						
						const resultCard = document.createElement('div');
						resultCard.className = 'result-card';
						resultCard.innerHTML = `
							<div class="result-header">
								<span class="result-algorithm">${checkbox.value}</span>
								<button class="copy-btn" data-hash="${hash}">
									<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
										<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
										<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
									</svg>
									Copiar
								</button>
							</div>
							<div class="result-hash">${hash}</div>
						`;
						
						resultsContainer.appendChild(resultCard);
					}

					// Show results
					resultsSection.style.display = 'block';
					resultsSection.scrollIntoView({ behavior: 'smooth', block: 'nearest' });

					// Add copy event listeners
					resultsContainer.querySelectorAll('.copy-btn').forEach(btn => {
						btn.addEventListener('click', (e) => {
							const button = e.currentTarget as HTMLElement;
							const hash = button.getAttribute('data-hash');
							if (hash) {
								copyToClipboard(hash, button);
							}
						});
					});

					showToast('Hashes generados correctamente');
				} catch (error) {
					console.error('Error generating hashes:', error);
					showToast('Error al generar hashes', 'error');
				} finally {
					// Re-enable button
					generateBtn.disabled = false;
					generateBtn.innerHTML = `
						<svg width="20" height="20" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<path d="M21 12a9 9 0 1 1-9-9" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
							<path d="M12 3v9l4 4" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
						</svg>
						Generar Hashes
					`;
				}
			});

			// Allow Enter key to generate (with Ctrl/Cmd)
			inputText?.addEventListener('keydown', (e) => {
				if ((e.ctrlKey || e.metaKey) && e.key === 'Enter') {
					generateBtn?.click();
				}
			});
		});
	</script>
</Layout>
