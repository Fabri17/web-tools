---
import Layout from "../layouts/Layout.astro";
import ToolHeader from "../components/ToolHeader.astro";

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<circle cx="12" cy="12" r="10" stroke="white" stroke-width="1.5"/>
		<path d="M8 14s1.5 2 4 2 4-2 4-2" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
		<circle cx="9" cy="9" r="1" fill="white"/>
		<circle cx="15" cy="9" r="1" fill="white"/>
	</svg>
`;
---

<Layout
  title="Joke Generator - Generador de Chistes Online | Gratis"
  description="Genera chistes aleatorios divertidos en múltiples categorías. Brightens your day con humor de calidad."
  url="https://brix.center.com/joke-generator"
  image="/og-image.jpg"
>
  <main>
    <div class="container">
      <ToolHeader
        title="Joke Generator"
        subtitle="Genera chistes aleatorios para alegrar tu día"
        icon={icon}
        showPrimaryButton={false}
      />

      <div class="generator-container">
        <!-- Options Section -->
        <div class="options-section">
          <div class="option-group">
            <label for="category">Categoría:</label>
            <select id="category" class="category-select">
              <option value="Any">Cualquiera</option>
              <option value="Programming">Programación</option>
              <option value="Misc">Miscelánea</option>
              <option value="Dark">Humor Negro</option>
              <option value="Pun">Juegos de Palabras</option>
              <option value="Spooky">Terror</option>
              <option value="Christmas">Navidad</option>
            </select>
          </div>

          <div class="option-group">
            <label>Tipo de chiste:</label>
            <div class="type-options">
              <button class="type-btn active" data-type="any">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <circle
                    cx="12"
                    cy="12"
                    r="10"
                    stroke="currentColor"
                    stroke-width="2"></circle>
                  <path
                    d="M12 8v8m-4-4h8"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"></path>
                </svg>
                Cualquiera
              </button>
              <button class="type-btn" data-type="single">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2"
                    stroke="currentColor"
                    stroke-width="2"></path>
                </svg>
                Una línea
              </button>
              <button class="type-btn" data-type="twopart">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M8 6h13M8 12h13M8 18h13M3 6h.01M3 12h.01M3 18h.01"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"></path>
                </svg>
                Setup + Punchline
              </button>
            </div>
          </div>

          <div class="option-group">
            <label class="checkbox-label">
              <input type="checkbox" id="safeMode" checked />
              <span>Modo seguro (filtrar contenido explícito)</span>
            </label>
          </div>

          <button class="generate-btn" id="generateBtn">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="2"></circle>
              <path
                d="M8 14s1.5 2 4 2 4-2 4-2"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"></path>
            </svg>
            Generar Chiste
          </button>

          <div class="rate-limit-info" id="rateLimitInfo">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <circle
                cx="12"
                cy="12"
                r="10"
                stroke="currentColor"
                stroke-width="2"></circle>
              <path
                d="M12 6v6l4 2"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"></path>
            </svg>
            <span
              >Chistes disponibles: <strong id="remainingJokes">10</strong>/10
              por minuto</span
            >
          </div>
        </div>

        <!-- Joke Display Section -->
        <div class="joke-section">
          <div id="jokeDisplay" class="joke-display">
            <div class="empty-state">
              <svg
                width="64"
                height="64"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="1.5"></circle>
                <path
                  d="M8 14s1.5 2 4 2 4-2 4-2"
                  stroke="currentColor"
                  stroke-width="1.5"
                  stroke-linecap="round"></path>
                <circle cx="9" cy="9" r="1" fill="currentColor"></circle>
                <circle cx="15" cy="9" r="1" fill="currentColor"></circle>
              </svg>
              <p>Haz clic en "Generar Chiste" para comenzar a reír</p>
            </div>
          </div>

          <div class="joke-actions" id="jokeActions" style="display: none;">
            <button class="action-btn" id="copyBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="9"
                  y="9"
                  width="13"
                  height="13"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="2"></rect>
                <path
                  d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
                  stroke="currentColor"
                  stroke-width="2"></path>
              </svg>
              Copiar
            </button>
            <button class="action-btn" id="shareBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M4 12v8a2 2 0 002 2h12a2 2 0 002-2v-8M16 6l-4-4-4 4M12 2v13"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Compartir
            </button>
            <button class="action-btn" id="favoriteBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Favorito
            </button>
          </div>
        </div>

        <!-- Favorites Section -->
        <div class="favorites-section">
          <div class="favorites-header">
            <h3>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20.84 4.61a5.5 5.5 0 00-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 00-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 000-7.78z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Chistes Favoritos
            </h3>
            <button
              class="clear-favorites-btn"
              id="clearFavoritesBtn"
              style="display: none;"
            >
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M3 6h18M19 6v14a2 2 0 01-2 2H7a2 2 0 01-2-2V6m3 0V4a2 2 0 012-2h4a2 2 0 012 2v2"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              Limpiar Todo
            </button>
          </div>
          <div id="favoritesList" class="favorites-list">
            <div class="empty-state-small">
              <p>
                Aún no tienes chistes favoritos. ¡Guarda los que más te gusten!
              </p>
            </div>
          </div>
        </div>

        <!-- Info Section -->
        <div class="info-section">
          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M12 16v-4M12 8h.01"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              Sobre esta herramienta
            </h4>
            <p>
              Este generador de chistes utiliza la API pública de JokeAPI para
              traerte los mejores chistes en múltiples categorías. Todos los
              chistes se obtienen en tiempo real desde una base de datos curada.
            </p>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Características
            </h4>
            <ul>
              <li>Múltiples categorías de chistes</li>
              <li>Modo seguro para filtrar contenido</li>
              <li>Guarda tus favoritos localmente</li>
              <li>Comparte chistes fácilmente</li>
              <li>Rate limiting inteligente</li>
            </ul>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Rate Limiting
            </h4>
            <p>
              Para evitar abusar de la API, limitamos las peticiones a 10
              chistes por minuto. El contador se reinicia automáticamente cada
              60 segundos.
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .generator-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .options-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
  }

  .option-group label {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .category-select {
    padding: 0.75rem 1rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .category-select:focus {
    outline: none;
    border-color: rgba(139, 92, 246, 0.5);
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .type-options {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .type-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .type-btn:hover {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.4);
  }

  .type-btn.active {
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border-color: transparent;
    color: white;
  }

  .checkbox-label {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    cursor: pointer;
    font-weight: 500;
    color: var(--text-primary);
  }

  .checkbox-label input[type="checkbox"] {
    width: 20px;
    height: 20px;
    cursor: pointer;
    accent-color: #8b5cf6;
  }

  .generate-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border: none;
    border-radius: 12px;
    color: white;
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
  }

  .generate-btn:hover:not(:disabled) {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
  }

  .generate-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .generate-btn:active:not(:disabled) {
    transform: translateY(0);
  }

  .rate-limit-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    background: rgba(59, 130, 246, 0.1);
    border: 1px solid rgba(59, 130, 246, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .rate-limit-info svg {
    color: #3b82f6;
    flex-shrink: 0;
  }

  .rate-limit-info strong {
    color: #8b5cf6;
    font-weight: 700;
  }

  .joke-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-color);
  }

  .joke-display {
    min-height: 250px;
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 2rem;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    text-align: center;
    color: var(--text-secondary);
    gap: 1rem;
  }

  .empty-state svg {
    opacity: 0.5;
  }

  :global(.joke-content) {
    width: 100%;
    text-align: center;
    animation: fadeIn 0.5s ease;
  }

  :global(.joke-content .joke-text) {
    font-size: 1.25rem;
    line-height: 1.8;
    color: var(--text-primary);
    margin-bottom: 1rem;
  }

  :global(.joke-content .joke-setup) {
    font-size: 1.25rem;
    line-height: 1.8;
    color: var(--text-primary);
    margin-bottom: 1rem;
    font-weight: 600;
  }

  :global(.joke-content .joke-delivery) {
    font-size: 1.125rem;
    line-height: 1.8;
    color: #8b5cf6;
    font-style: italic;
  }

  :global(.joke-content .joke-category) {
    display: inline-block;
    margin-top: 1.5rem;
    padding: 0.375rem 0.875rem;
    background: rgba(139, 92, 246, 0.1);
    color: #8b5cf6;
    border-radius: 20px;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .joke-actions {
    display: flex;
    justify-content: center;
    gap: 1rem;
    margin-top: 1.5rem;
    padding-top: 1.5rem;
    border-top: 1px solid var(--border-color);
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-btn:hover {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.4);
    transform: translateY(-2px);
  }

  .action-btn.favorited {
    background: #8b5cf6;
    color: white;
    border-color: transparent;
  }

  .favorites-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .favorites-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .favorites-header h3 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .favorites-header h3 svg {
    color: #8b5cf6;
  }

  .clear-favorites-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 6px;
    color: #ef4444;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .clear-favorites-btn:hover {
    background: rgba(239, 68, 68, 0.2);
    border-color: rgba(239, 68, 68, 0.4);
  }

  .favorites-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .empty-state-small {
    text-align: center;
    color: var(--text-secondary);
    padding: 2rem;
    font-size: 0.9375rem;
  }

  :global(.favorite-item) {
    padding: 1.25rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  :global(.favorite-item:hover) {
    border-color: rgba(139, 92, 246, 0.3);
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.1);
  }

  :global(.favorite-item .favorite-text) {
    color: var(--text-primary);
    line-height: 1.6;
    margin-bottom: 0.75rem;
  }

  :global(.favorite-item .favorite-footer) {
    display: flex;
    justify-content: space-between;
    align-items: center;
  }

  :global(.favorite-item .favorite-category) {
    display: inline-block;
    padding: 0.25rem 0.75rem;
    background: rgba(139, 92, 246, 0.1);
    color: #8b5cf6;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
  }

  :global(.favorite-item .remove-favorite-btn) {
    padding: 0.375rem 0.875rem;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid rgba(239, 68, 68, 0.2);
    border-radius: 6px;
    color: #ef4444;
    font-size: 0.75rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  :global(.favorite-item .remove-favorite-btn:hover) {
    background: rgba(239, 68, 68, 0.2);
    border-color: rgba(239, 68, 68, 0.4);
  }

  .info-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .info-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .info-card h4 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
  }

  .info-card h4 svg {
    color: #8b5cf6;
  }

  .info-card p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  .info-card ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .info-card ul li {
    position: relative;
    padding-left: 1.5rem;
    color: var(--text-secondary);
    line-height: 1.8;
  }

  .info-card ul li::before {
    content: "→";
    position: absolute;
    left: 0;
    color: #8b5cf6;
    font-weight: bold;
  }

  @keyframes fadeIn {
    from {
      opacity: 0;
      transform: translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .type-options {
      flex-direction: column;
    }

    .type-btn {
      width: 100%;
      justify-content: center;
    }

    .joke-actions {
      flex-wrap: wrap;
    }

    .action-btn {
      flex: 1;
      min-width: 120px;
    }

    .favorites-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .clear-favorites-btn {
      width: 100%;
      justify-content: center;
    }
  }

  /* Light Mode (default) */
  .container {
    --bg-primary: #ffffff;
    --bg-secondary: #f8f9fa;
    --card-bg: #ffffff;
    --text-primary: #1a1a2e;
    --text-secondary: #6b7280;
    --border-color: rgba(139, 92, 246, 0.2);
  }

  /* Dark Mode */
  :global(.dark-mode) .container {
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --card-bg: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #cbd5e1;
    --border-color: #334155;
  }

  :global(.dark-mode) .options-section,
  :global(.dark-mode) .joke-section,
  :global(.dark-mode) .favorites-section,
  :global(.dark-mode) .info-card {
    background: #1e293b;
    border-color: #334155;
  }

  :global(.dark-mode) .category-select {
    background: #0f172a;
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .type-btn {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .type-btn:hover {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .action-btn {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .action-btn:hover {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) :global(.favorite-item) {
    background: #0f172a;
    border-color: #334155;
  }

  :global(.dark-mode) :global(.favorite-item:hover) {
    border-color: #8b5cf6;
  }
</style>

<script>
  // Rate limiting
  const RATE_LIMIT = 10;
  const RATE_LIMIT_WINDOW = 60000; // 1 minuto
  let requestCount = 0;
  let lastResetTime = Date.now();

  // State
  let currentJoke: any = null;
  let currentType = "any";
  let favorites: any[] = [];

  // Elements
  const categorySelect = document.getElementById(
    "category"
  ) as HTMLSelectElement;
  const safeModeCheckbox = document.getElementById(
    "safeMode"
  ) as HTMLInputElement;
  const generateBtn = document.getElementById(
    "generateBtn"
  ) as HTMLButtonElement;
  const typeButtons = document.querySelectorAll(".type-btn");
  const jokeDisplay = document.getElementById("jokeDisplay") as HTMLDivElement;
  const jokeActions = document.getElementById("jokeActions") as HTMLDivElement;
  const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;
  const shareBtn = document.getElementById("shareBtn") as HTMLButtonElement;
  const favoriteBtn = document.getElementById(
    "favoriteBtn"
  ) as HTMLButtonElement;
  const favoritesList = document.getElementById(
    "favoritesList"
  ) as HTMLDivElement;
  const clearFavoritesBtn = document.getElementById(
    "clearFavoritesBtn"
  ) as HTMLButtonElement;
  const remainingJokesSpan = document.getElementById(
    "remainingJokes"
  ) as HTMLSpanElement;
  const rateLimitInfo = document.getElementById(
    "rateLimitInfo"
  ) as HTMLDivElement;

  // Load favorites from localStorage
  function loadFavorites() {
    const stored = localStorage.getItem("jokesFavorites");
    if (stored) {
      favorites = JSON.parse(stored);
      displayFavorites();
    }
  }

  // Save favorites to localStorage
  function saveFavorites() {
    localStorage.setItem("jokesFavorites", JSON.stringify(favorites));
  }

  // Check rate limit
  function checkRateLimit(): boolean {
    const now = Date.now();

    // Reset counter if window has passed
    if (now - lastResetTime >= RATE_LIMIT_WINDOW) {
      requestCount = 0;
      lastResetTime = now;
    }

    return requestCount < RATE_LIMIT;
  }

  // Update rate limit display
  function updateRateLimitDisplay() {
    const remaining = Math.max(0, RATE_LIMIT - requestCount);
    remainingJokesSpan.textContent = remaining.toString();

    if (remaining === 0) {
      generateBtn.disabled = true;
      rateLimitInfo.style.borderColor = "rgba(239, 68, 68, 0.3)";
      rateLimitInfo.style.background = "rgba(239, 68, 68, 0.1)";

      // Auto-enable after window
      const timeToReset = RATE_LIMIT_WINDOW - (Date.now() - lastResetTime);
      setTimeout(() => {
        requestCount = 0;
        lastResetTime = Date.now();
        updateRateLimitDisplay();
        generateBtn.disabled = false;
        rateLimitInfo.style.borderColor = "rgba(59, 130, 246, 0.2)";
        rateLimitInfo.style.background = "rgba(59, 130, 246, 0.1)";
        showNotification(
          "¡Rate limit reiniciado! Ya puedes generar más chistes.",
          "success"
        );
      }, timeToReset);
    }
  }

  // Type selection
  typeButtons.forEach((btn) => {
    btn.addEventListener("click", () => {
      typeButtons.forEach((b) => b.classList.remove("active"));
      btn.classList.add("active");
      currentType = btn.getAttribute("data-type") || "any";
    });
  });

  // Generate joke
  generateBtn.addEventListener("click", async () => {
    if (!checkRateLimit()) {
      showNotification(
        "Has alcanzado el límite de solicitudes. Espera un minuto.",
        "error"
      );
      return;
    }

    generateBtn.disabled = true;
    jokeDisplay.innerHTML =
      '<div class="empty-state"><p>Cargando chiste...</p></div>';

    try {
      const category = categorySelect.value;
      const safeMode = safeModeCheckbox.checked;
      const typeParam = currentType === "any" ? "" : `&type=${currentType}`;
      const flags = safeMode
        ? "&blacklistFlags=nsfw,religious,political,racist,sexist,explicit"
        : "";

      const url = `https://v2.jokeapi.dev/joke/${category}?${typeParam}${flags}`;

      const response = await fetch(url);

      if (!response.ok) {
        throw new Error("Error al obtener el chiste");
      }

      const data = await response.json();

      if (data.error) {
        throw new Error(data.message || "Error al obtener el chiste");
      }

      currentJoke = data;
      requestCount++;
      updateRateLimitDisplay();
      displayJoke(data);
      jokeActions.style.display = "flex";
      updateFavoriteButton();
    } catch (error) {
      console.error("Error:", error);
      showNotification("Error al cargar el chiste. Intenta de nuevo.", "error");
      jokeDisplay.innerHTML = `
				<div class="empty-state">
					<svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
						<circle cx="12" cy="12" r="10" stroke="currentColor" stroke-width="1.5"/>
						<path d="M12 8v4M12 16h.01" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
					</svg>
					<p>Error al cargar el chiste. Intenta de nuevo.</p>
				</div>
			`;
    } finally {
      generateBtn.disabled = false;
    }
  });

  // Display joke
  function displayJoke(joke: any) {
    let html = '<div class="joke-content">';

    if (joke.type === "single") {
      html += `<p class="joke-text">${escapeHtml(joke.joke)}</p>`;
    } else {
      html += `
				<p class="joke-setup">${escapeHtml(joke.setup)}</p>
				<p class="joke-delivery">${escapeHtml(joke.delivery)}</p>
			`;
    }

    html += `<span class="joke-category">${escapeHtml(joke.category)}</span>`;
    html += "</div>";

    jokeDisplay.innerHTML = html;
  }

  // Escape HTML
  function escapeHtml(text: string): string {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  // Copy joke
  copyBtn.addEventListener("click", async () => {
    if (!currentJoke) return;

    let text = "";
    if (currentJoke.type === "single") {
      text = currentJoke.joke;
    } else {
      text = `${currentJoke.setup}\n\n${currentJoke.delivery}`;
    }

    try {
      await navigator.clipboard.writeText(text);
      showNotification("¡Chiste copiado al portapapeles!", "success");
    } catch (error) {
      showNotification("Error al copiar", "error");
    }
  });

  // Share joke
  shareBtn.addEventListener("click", async () => {
    if (!currentJoke) return;

    let text = "";
    if (currentJoke.type === "single") {
      text = currentJoke.joke;
    } else {
      text = `${currentJoke.setup}\n\n${currentJoke.delivery}`;
    }

    if (navigator.share) {
      try {
        await navigator.share({
          title: "Chiste divertido",
          text: text,
        });
        showNotification("¡Chiste compartido!", "success");
      } catch (error) {
        // User cancelled
      }
    } else {
      // Fallback to copy
      try {
        await navigator.clipboard.writeText(text);
        showNotification("Chiste copiado (compartir no disponible)", "info");
      } catch (error) {
        showNotification("Error al compartir", "error");
      }
    }
  });

  // Favorite joke
  favoriteBtn.addEventListener("click", () => {
    if (!currentJoke) return;

    const jokeId = currentJoke.id || Date.now();
    const existingIndex = favorites.findIndex((f) => f.id === jokeId);

    if (existingIndex >= 0) {
      // Remove from favorites
      favorites.splice(existingIndex, 1);
      showNotification("Chiste eliminado de favoritos", "info");
    } else {
      // Add to favorites
      favorites.push({
        id: jokeId,
        ...currentJoke,
        savedAt: Date.now(),
      });
      showNotification("¡Chiste añadido a favoritos!", "success");
    }

    saveFavorites();
    displayFavorites();
    updateFavoriteButton();
  });

  // Update favorite button state
  function updateFavoriteButton() {
    if (!currentJoke) return;

    const jokeId = currentJoke.id || Date.now();
    const isFavorite = favorites.some((f) => f.id === jokeId);

    if (isFavorite) {
      favoriteBtn.classList.add("favorited");
    } else {
      favoriteBtn.classList.remove("favorited");
    }
  }

  // Display favorites
  function displayFavorites() {
    if (favorites.length === 0) {
      favoritesList.innerHTML =
        '<div class="empty-state-small"><p>Aún no tienes chistes favoritos. ¡Guarda los que más te gusten!</p></div>';
      clearFavoritesBtn.style.display = "none";
      return;
    }

    clearFavoritesBtn.style.display = "flex";

    favoritesList.innerHTML = favorites
      .sort((a, b) => b.savedAt - a.savedAt)
      .map((joke) => {
        let text = "";
        if (joke.type === "single") {
          text = escapeHtml(joke.joke);
        } else {
          text = `<strong>${escapeHtml(joke.setup)}</strong><br><em>${escapeHtml(joke.delivery)}</em>`;
        }

        return `
					<div class="favorite-item">
						<div class="favorite-text">${text}</div>
						<div class="favorite-footer">
							<span class="favorite-category">${escapeHtml(joke.category)}</span>
							<button class="remove-favorite-btn" data-id="${joke.id}">Eliminar</button>
						</div>
					</div>
				`;
      })
      .join("");

    // Add remove event listeners
    document.querySelectorAll(".remove-favorite-btn").forEach((btn) => {
      btn.addEventListener("click", (e) => {
        const id = parseInt(
          (e.target as HTMLElement).getAttribute("data-id") || "0"
        );
        favorites = favorites.filter((f) => f.id !== id);
        saveFavorites();
        displayFavorites();
        updateFavoriteButton();
        showNotification("Chiste eliminado", "info");
      });
    });
  }

  // Clear all favorites
  clearFavoritesBtn.addEventListener("click", () => {
    if (
      confirm(
        "¿Estás seguro de que quieres eliminar todos tus chistes favoritos?"
      )
    ) {
      favorites = [];
      saveFavorites();
      displayFavorites();
      updateFavoriteButton();
      showNotification("Todos los favoritos eliminados", "info");
    }
  });

  // Notification system
  function showNotification(
    message: string,
    type: "success" | "error" | "info"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    notification.style.cssText = `
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			background: ${type === "success" ? "#10b981" : type === "error" ? "#ef4444" : "#3b82f6"};
			color: white;
			border-radius: 8px;
			font-weight: 500;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
			max-width: 300px;
		`;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = "slideOut 0.3s ease";
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Add animations
  const style = document.createElement("style");
  style.textContent = `
		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}
		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}
	`;
  document.head.appendChild(style);

  // Initialize
  loadFavorites();
  updateRateLimitDisplay();
</script>
