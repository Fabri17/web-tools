---
import Layout from "../layouts/Layout.astro";
import ToolHeader from "../components/ToolHeader.astro";

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<rect x="2" y="6" width="20" height="12" rx="2" stroke="white" stroke-width="1.5"/>
		<path d="M2 10h20M6 14h4M6 16h2" stroke="white" stroke-width="1.5" stroke-linecap="round"/>
		<circle cx="17" cy="15" r="2" stroke="white" stroke-width="1.5"/>
	</svg>
`;
---

<Layout
  title="Fake Data Generator - Generador de Datos de Prueba | WebTools Suite"
  description="Genera datos de prueba realistas: nombres, emails, direcciones, teléfonos, tarjetas de crédito, JSON y más. Ideal para testing, demos y desarrollo."
  url="https://brix.center.com/fake-data-generator"
  image="/og-image.jpg"
>
  <main>
    <div class="container">
      <ToolHeader
        title="Fake Data Generator"
        subtitle="Genera datos de prueba realistas para tus proyectos"
        icon={icon}
        showPrimaryButton={false}
      />

      <div class="generator-container">
        <!-- Data Type Selection -->
        <div class="data-types-section">
          <h3>Tipo de Datos</h3>
          <div class="data-type-grid">
            <button class="data-type-btn active" data-type="person">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <circle
                  cx="12"
                  cy="7"
                  r="4"
                  stroke="currentColor"
                  stroke-width="2"></circle>
              </svg>
              <span>Persona</span>
            </button>
            <button class="data-type-btn" data-type="address">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M21 10c0 7-9 13-9 13s-9-6-9-13a9 9 0 0 1 18 0z"
                  stroke="currentColor"
                  stroke-width="2"></path>
                <circle
                  cx="12"
                  cy="10"
                  r="3"
                  stroke="currentColor"
                  stroke-width="2"></circle>
              </svg>
              <span>Dirección</span>
            </button>
            <button class="data-type-btn" data-type="company">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="4"
                  y="2"
                  width="16"
                  height="20"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="2"></rect>
                <path
                  d="M9 6h6M9 10h6M9 14h6M9 18h6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              <span>Empresa</span>
            </button>
            <button class="data-type-btn" data-type="internet">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M2 12h20M12 2a15.3 15.3 0 0 1 4 10 15.3 15.3 0 0 1-4 10 15.3 15.3 0 0 1-4-10 15.3 15.3 0 0 1 4-10z"
                  stroke="currentColor"
                  stroke-width="2"></path>
              </svg>
              <span>Internet</span>
            </button>
            <button class="data-type-btn" data-type="finance">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="2"
                  y="6"
                  width="20"
                  height="12"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="2"></rect>
                <circle
                  cx="7"
                  cy="12"
                  r="2"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M17 9l-3 3 3 3"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              <span>Finanzas</span>
            </button>
            <button class="data-type-btn" data-type="commerce">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="9"
                  cy="21"
                  r="1"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <circle
                  cx="20"
                  cy="21"
                  r="1"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              <span>Comercio</span>
            </button>
            <button class="data-type-btn" data-type="lorem">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
                  stroke="currentColor"
                  stroke-width="2"></path>
                <path
                  d="M14 2v6h6M16 13H8M16 17H8M10 9H8"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              <span>Texto</span>
            </button>
            <button class="data-type-btn" data-type="date">
              <svg
                width="24"
                height="24"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="3"
                  y="4"
                  width="18"
                  height="18"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="2"></rect>
                <path
                  d="M16 2v4M8 2v4M3 10h18"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              <span>Fechas</span>
            </button>
          </div>
        </div>

        <!-- Options -->
        <div class="options-section">
          <div class="option-group">
            <label for="quantity">Cantidad de registros:</label>
            <div class="counter-control">
              <button class="counter-btn" id="decrementBtn">-</button>
              <input
                type="number"
                id="quantity"
                min="1"
                max="100"
                value="10"
                readonly
              />
              <button class="counter-btn" id="incrementBtn">+</button>
            </div>
          </div>

          <div class="option-group">
            <label>Formato de salida:</label>
            <div class="format-options">
              <button class="format-btn active" data-format="json">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M4 7V4h3M4 17v3h3M20 7V4h-3M20 17v3h-3"
                    stroke="currentColor"
                    stroke-width="2"></path>
                  <rect
                    x="7"
                    y="7"
                    width="10"
                    height="10"
                    rx="2"
                    stroke="currentColor"
                    stroke-width="2"></rect>
                </svg>
                JSON
              </button>
              <button class="format-btn" data-format="csv">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
                    stroke="currentColor"
                    stroke-width="2"></path>
                  <path
                    d="M14 2v6h6M12 18v-6M9 15l3 3 3-3"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
                CSV
              </button>
              <button class="format-btn" data-format="sql">
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <ellipse
                    cx="12"
                    cy="5"
                    rx="9"
                    ry="3"
                    stroke="currentColor"
                    stroke-width="2"></ellipse>
                  <path
                    d="M3 5v14c0 1.66 4 3 9 3s9-1.34 9-3V5M3 12c0 1.66 4 3 9 3s9-1.34 9-3"
                    stroke="currentColor"
                    stroke-width="2"></path>
                </svg>
                SQL
              </button>
            </div>
          </div>

          <button class="generate-btn" id="generateBtn">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              xmlns="http://www.w3.org/2000/svg"
            >
              <path
                d="M21 12a9 9 0 11-18 0 9 9 0 0118 0z"
                stroke="currentColor"
                stroke-width="2"></path>
              <path
                d="M9 12l2 2 4-4"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            Generar Datos
          </button>
        </div>

        <!-- Results Section -->
        <div class="results-section">
          <div class="results-header">
            <h3>Datos Generados</h3>
            <div class="results-actions">
              <button class="action-btn" id="copyBtn" disabled>
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <rect
                    x="9"
                    y="9"
                    width="13"
                    height="13"
                    rx="2"
                    stroke="currentColor"
                    stroke-width="2"></rect>
                  <path
                    d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1"
                    stroke="currentColor"
                    stroke-width="2"></path>
                </svg>
                Copiar
              </button>
              <button class="action-btn" id="downloadBtn" disabled>
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4M7 10l5 5m0 0l5-5m-5 5V3"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"
                    stroke-linejoin="round"></path>
                </svg>
                Descargar
              </button>
              <button class="action-btn" id="clearBtn" disabled>
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  xmlns="http://www.w3.org/2000/svg"
                >
                  <path
                    d="M18 6L6 18M6 6l12 12"
                    stroke="currentColor"
                    stroke-width="2"
                    stroke-linecap="round"></path>
                </svg>
                Limpiar
              </button>
            </div>
          </div>

          <div id="output" class="output">
            <div class="empty-state">
              <svg
                width="64"
                height="64"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="2"
                  y="6"
                  width="20"
                  height="12"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="1.5"></rect>
                <path
                  d="M2 10h20M6 14h4M6 16h2"
                  stroke="currentColor"
                  stroke-width="1.5"
                  stroke-linecap="round"></path>
                <circle
                  cx="17"
                  cy="15"
                  r="2"
                  stroke="currentColor"
                  stroke-width="1.5"></circle>
              </svg>
              <p>Selecciona un tipo de datos y haz clic en "Generar Datos"</p>
            </div>
          </div>
        </div>

        <!-- Info Section -->
        <div class="info-section">
          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M12 16v-4M12 8h.01"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              ¿Para qué sirve?
            </h4>
            <p>
              Esta herramienta genera datos falsos pero realistas para usar en
              desarrollo, testing, demos y prototipados sin comprometer
              información real.
            </p>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Casos de uso
            </h4>
            <ul>
              <li>Testing de aplicaciones</li>
              <li>Demos y presentaciones</li>
              <li>Desarrollo de interfaces</li>
              <li>Poblado de bases de datos</li>
              <li>Prototipos y mockups</li>
            </ul>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2L2 7v10c0 5.55 3.84 10.74 9 12 5.16-1.26 9-6.45 9-12V7l-10-5z"
                  stroke="currentColor"
                  stroke-width="2"></path>
                <path
                  d="M9 12l2 2 4-4"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              100% Privado
            </h4>
            <p>
              Toda la generación de datos ocurre en tu navegador. No se envía
              ninguna información a servidores externos.
            </p>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .generator-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .data-types-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-color);
  }

  .data-types-section h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 1.5rem 0;
  }

  .data-type-grid {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(140px, 1fr));
    gap: 1rem;
  }

  .data-type-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.75rem;
    padding: 1.25rem 1rem;
    background: var(--bg-primary);
    border: 2px solid var(--border-color);
    border-radius: 12px;
    color: var(--text-primary);
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .data-type-btn:hover {
    border-color: rgba(139, 92, 246, 0.5);
    background: rgba(139, 92, 246, 0.05);
    transform: translateY(-2px);
  }

  .data-type-btn.active {
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border-color: transparent;
    color: white;
  }

  .data-type-btn svg {
    width: 32px;
    height: 32px;
  }

  .data-type-btn span {
    font-size: 0.875rem;
    font-weight: 600;
  }

  .options-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .option-group {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .option-group label {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .counter-control {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  .counter-btn {
    width: 48px;
    height: 48px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1.5rem;
    font-weight: bold;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .counter-btn:hover {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.5);
  }

  .counter-control input {
    flex: 1;
    max-width: 120px;
    padding: 0.75rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1.125rem;
    font-weight: 600;
    text-align: center;
    cursor: default;
    user-select: none;
  }

  .format-options {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .format-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .format-btn:hover {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.4);
  }

  .format-btn.active {
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border-color: transparent;
    color: white;
  }

  .generate-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border: none;
    border-radius: 12px;
    color: white;
    font-size: 1.125rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    box-shadow: 0 4px 12px rgba(139, 92, 246, 0.3);
  }

  .generate-btn:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
  }

  .generate-btn:active {
    transform: translateY(0);
  }

  .results-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .results-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .results-header h3 {
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .results-actions {
    display: flex;
    gap: 0.5rem;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 6px;
    color: var(--text-primary);
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .action-btn:hover:not(:disabled) {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.4);
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .output {
    min-height: 400px;
    max-height: 600px;
    overflow: auto;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 1rem;
    font-family: "Monaco", "Courier New", monospace;
    font-size: 0.875rem;
    line-height: 1.6;
    color: var(--text-primary);
    white-space: pre-wrap;
    word-break: break-word;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 400px;
    color: var(--text-secondary);
    text-align: center;
    gap: 1rem;
  }

  .empty-state svg {
    opacity: 0.5;
  }

  .info-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .info-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .info-card h4 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
  }

  .info-card h4 svg {
    color: #8b5cf6;
  }

  .info-card p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  .info-card ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .info-card ul li {
    position: relative;
    padding-left: 1.5rem;
    color: var(--text-secondary);
    line-height: 1.8;
  }

  .info-card ul li::before {
    content: "→";
    position: absolute;
    left: 0;
    color: #8b5cf6;
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .data-type-grid {
      grid-template-columns: repeat(auto-fill, minmax(100px, 1fr));
    }

    .data-type-btn {
      padding: 1rem 0.75rem;
    }

    .data-type-btn svg {
      width: 24px;
      height: 24px;
    }

    .data-type-btn span {
      font-size: 0.75rem;
    }

    .results-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .results-actions {
      width: 100%;
    }

    .action-btn {
      flex: 1;
      font-size: 0.75rem;
      padding: 0.5rem 0.5rem;
    }

    .format-options {
      flex-direction: column;
    }

    .format-btn {
      width: 100%;
      justify-content: center;
    }
  }

  /* Light Mode (default) */
  .container {
    --bg-primary: #ffffff;
    --bg-secondary: #f8f9fa;
    --card-bg: #ffffff;
    --text-primary: #1a1a2e;
    --text-secondary: #6b7280;
    --border-color: rgba(139, 92, 246, 0.2);
  }

  /* Dark Mode */
  :global(.dark-mode) .container {
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --card-bg: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #cbd5e1;
    --border-color: #334155;
  }

  :global(.dark-mode) .data-types-section,
  :global(.dark-mode) .options-section,
  :global(.dark-mode) .results-section,
  :global(.dark-mode) .info-card {
    background: #1e293b;
    border-color: #334155;
  }

  :global(.dark-mode) .data-type-btn {
    background: #0f172a;
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .data-type-btn:hover {
    border-color: #8b5cf6;
    background: rgba(139, 92, 246, 0.1);
  }

  :global(.dark-mode) .counter-control input {
    background: #0f172a;
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .counter-btn {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .counter-btn:hover {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .format-btn {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .format-btn:hover {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .action-btn {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .action-btn:hover:not(:disabled) {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .output {
    background: #0f172a;
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .empty-state {
    color: #64748b;
  }
</style>

<script>
  import { faker } from "@faker-js/faker";

  let currentDataType: string = "person";
  let currentFormat: string = "json";
  let generatedData: any[] = [];

  // Elements
  const quantityInput = document.getElementById("quantity") as HTMLInputElement;
  const decrementBtn = document.getElementById(
    "decrementBtn"
  ) as HTMLButtonElement;
  const incrementBtn = document.getElementById(
    "incrementBtn"
  ) as HTMLButtonElement;
  const generateBtn = document.getElementById(
    "generateBtn"
  ) as HTMLButtonElement;
  const dataTypeBtns = document.querySelectorAll(".data-type-btn");
  const formatBtns = document.querySelectorAll(".format-btn");
  const output = document.getElementById("output") as HTMLDivElement;
  const copyBtn = document.getElementById("copyBtn") as HTMLButtonElement;
  const downloadBtn = document.getElementById(
    "downloadBtn"
  ) as HTMLButtonElement;
  const clearBtn = document.getElementById("clearBtn") as HTMLButtonElement;

  // Counter controls
  decrementBtn.addEventListener("click", () => {
    const current = parseInt(quantityInput.value);
    if (current > 1) {
      quantityInput.value = (current - 1).toString();
    }
  });

  incrementBtn.addEventListener("click", () => {
    const current = parseInt(quantityInput.value);
    if (current < 100) {
      quantityInput.value = (current + 1).toString();
    }
  });

  // Data type selection
  dataTypeBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      dataTypeBtns.forEach((b) => b.classList.remove("active"));
      btn.classList.add("active");
      currentDataType = btn.getAttribute("data-type") || "person";
    });
  });

  // Format selection
  formatBtns.forEach((btn) => {
    btn.addEventListener("click", () => {
      formatBtns.forEach((b) => b.classList.remove("active"));
      btn.classList.add("active");
      currentFormat = btn.getAttribute("data-format") || "json";

      // Regenerate output if data exists
      if (generatedData.length > 0) {
        displayOutput();
      }
    });
  });

  // Generate data functions
  function generatePersonData() {
    return {
      id: faker.string.uuid(),
      firstName: faker.person.firstName(),
      lastName: faker.person.lastName(),
      fullName: faker.person.fullName(),
      email: faker.internet.email(),
      phone: faker.phone.number(),
      birthDate: faker.date
        .birthdate({ min: 18, max: 65, mode: "age" })
        .toISOString()
        .split("T")[0],
      gender: faker.person.sex(),
      jobTitle: faker.person.jobTitle(),
      bio: faker.person.bio(),
    };
  }

  function generateAddressData() {
    return {
      id: faker.string.uuid(),
      street: faker.location.streetAddress(),
      city: faker.location.city(),
      state: faker.location.state(),
      zipCode: faker.location.zipCode(),
      country: faker.location.country(),
      countryCode: faker.location.countryCode(),
      latitude: faker.location.latitude(),
      longitude: faker.location.longitude(),
      timezone: faker.location.timeZone(),
    };
  }

  function generateCompanyData() {
    return {
      id: faker.string.uuid(),
      name: faker.company.name(),
      catchPhrase: faker.company.catchPhrase(),
      bs: faker.company.buzzPhrase(),
      industry: faker.company.buzzNoun(),
      department: faker.commerce.department(),
      employees: faker.number.int({ min: 10, max: 10000 }),
      founded: faker.date.past({ years: 50 }).getFullYear(),
    };
  }

  function generateInternetData() {
    return {
      id: faker.string.uuid(),
      email: faker.internet.email(),
      username: faker.internet.userName(),
      password: faker.internet.password(),
      url: faker.internet.url(),
      domain: faker.internet.domainName(),
      ip: faker.internet.ip(),
      ipv6: faker.internet.ipv6(),
      userAgent: faker.internet.userAgent(),
      mac: faker.internet.mac(),
    };
  }

  function generateFinanceData() {
    return {
      id: faker.string.uuid(),
      accountNumber: faker.finance.accountNumber(),
      accountName: faker.finance.accountName(),
      iban: faker.finance.iban(),
      bic: faker.finance.bic(),
      creditCard: faker.finance.creditCardNumber(),
      cvv: faker.finance.creditCardCVV(),
      amount: faker.finance.amount(),
      currency: faker.finance.currencyCode(),
      transactionType: faker.finance.transactionType(),
    };
  }

  function generateCommerceData() {
    return {
      id: faker.string.uuid(),
      productName: faker.commerce.productName(),
      department: faker.commerce.department(),
      price: faker.commerce.price(),
      description: faker.commerce.productDescription(),
      material: faker.commerce.productMaterial(),
      color: faker.color.human(),
      sku: faker.string.alphanumeric(10).toUpperCase(),
      barcode: faker.string.numeric(13),
    };
  }

  function generateLoremData() {
    return {
      id: faker.string.uuid(),
      word: faker.lorem.word(),
      words: faker.lorem.words(5),
      sentence: faker.lorem.sentence(),
      sentences: faker.lorem.sentences(3),
      paragraph: faker.lorem.paragraph(),
      paragraphs: faker.lorem.paragraphs(2),
    };
  }

  function generateDateData() {
    return {
      id: faker.string.uuid(),
      past: faker.date.past().toISOString(),
      future: faker.date.future().toISOString(),
      recent: faker.date.recent().toISOString(),
      soon: faker.date.soon().toISOString(),
      birthdate: faker.date.birthdate().toISOString(),
      month: faker.date.month(),
      weekday: faker.date.weekday(),
    };
  }

  // Generate data
  generateBtn.addEventListener("click", () => {
    const quantity = parseInt(quantityInput.value) || 10;
    generatedData = [];

    for (let i = 0; i < quantity; i++) {
      let data;
      switch (currentDataType) {
        case "person":
          data = generatePersonData();
          break;
        case "address":
          data = generateAddressData();
          break;
        case "company":
          data = generateCompanyData();
          break;
        case "internet":
          data = generateInternetData();
          break;
        case "finance":
          data = generateFinanceData();
          break;
        case "commerce":
          data = generateCommerceData();
          break;
        case "lorem":
          data = generateLoremData();
          break;
        case "date":
          data = generateDateData();
          break;
        default:
          data = generatePersonData();
      }
      generatedData.push(data);
    }

    displayOutput();
    enableButtons();
    showNotification(
      `¡${quantity} registro${quantity > 1 ? "s" : ""} generado${quantity > 1 ? "s" : ""}!`,
      "success"
    );
  });

  // Display output
  function displayOutput() {
    let outputText = "";

    switch (currentFormat) {
      case "json":
        outputText = JSON.stringify(generatedData, null, 2);
        break;
      case "csv":
        outputText = convertToCSV(generatedData);
        break;
      case "sql":
        outputText = convertToSQL(generatedData);
        break;
    }

    output.textContent = outputText;
  }

  // Convert to CSV
  function convertToCSV(data: any[]): string {
    if (data.length === 0) return "";

    const headers = Object.keys(data[0]);
    const csvRows = [headers.join(",")];

    for (const row of data) {
      const values = headers.map((header) => {
        const value = row[header];
        return typeof value === "string"
          ? `"${value.replace(/"/g, '""')}"`
          : value;
      });
      csvRows.push(values.join(","));
    }

    return csvRows.join("\n");
  }

  // Convert to SQL
  function convertToSQL(data: any[]): string {
    if (data.length === 0) return "";

    const tableName = currentDataType;
    const headers = Object.keys(data[0]);

    let sql = `-- SQL INSERT statements for ${tableName}\n\n`;
    sql += `CREATE TABLE ${tableName} (\n`;
    sql += headers.map((h) => `  ${h} VARCHAR(255)`).join(",\n");
    sql += "\n);\n\n";

    for (const row of data) {
      const values = headers.map((header) => {
        const value = row[header];
        return typeof value === "string"
          ? `'${value.replace(/'/g, "''")}'`
          : value;
      });
      sql += `INSERT INTO ${tableName} (${headers.join(", ")}) VALUES (${values.join(", ")});\n`;
    }

    return sql;
  }

  // Copy to clipboard
  copyBtn.addEventListener("click", async () => {
    try {
      await navigator.clipboard.writeText(output.textContent || "");
      showNotification("¡Datos copiados!", "success");
    } catch (error) {
      showNotification("Error al copiar", "error");
    }
  });

  // Download
  downloadBtn.addEventListener("click", () => {
    const text = output.textContent || "";
    const extension =
      currentFormat === "json"
        ? "json"
        : currentFormat === "csv"
          ? "csv"
          : "sql";
    const blob = new Blob([text], { type: "text/plain" });
    const url = URL.createObjectURL(blob);
    const a = document.createElement("a");
    a.href = url;
    a.download = `fake-data-${currentDataType}-${new Date().toISOString().split("T")[0]}.${extension}`;
    a.click();
    URL.revokeObjectURL(url);
    showNotification("¡Archivo descargado!", "success");
  });

  // Clear
  clearBtn.addEventListener("click", () => {
    generatedData = [];
    output.innerHTML = `
			<div class="empty-state">
				<svg width="64" height="64" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
					<rect x="2" y="6" width="20" height="12" rx="2" stroke="currentColor" stroke-width="1.5"/>
					<path d="M2 10h20M6 14h4M6 16h2" stroke="currentColor" stroke-width="1.5" stroke-linecap="round"/>
					<circle cx="17" cy="15" r="2" stroke="currentColor" stroke-width="1.5"/>
				</svg>
				<p>Selecciona un tipo de datos y haz clic en "Generar Datos"</p>
			</div>
		`;
    disableButtons();
    showNotification("Salida limpiada", "info");
  });

  // Enable/Disable buttons
  function enableButtons() {
    copyBtn.disabled = false;
    downloadBtn.disabled = false;
    clearBtn.disabled = false;
  }

  function disableButtons() {
    copyBtn.disabled = true;
    downloadBtn.disabled = true;
    clearBtn.disabled = true;
  }

  // Notification system
  function showNotification(
    message: string,
    type: "success" | "error" | "info"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    notification.style.cssText = `
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			background: ${type === "success" ? "#10b981" : type === "error" ? "#ef4444" : "#3b82f6"};
			color: white;
			border-radius: 8px;
			font-weight: 500;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
		`;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = "slideOut 0.3s ease";
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Add animations
  const style = document.createElement("style");
  style.textContent = `
		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}
		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}
	`;
  document.head.appendChild(style);
</script>
