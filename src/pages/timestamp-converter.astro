---
import Layout from "../layouts/Layout.astro";
import ToolHeader from "../components/ToolHeader.astro";

const icon = `
	<svg width="32" height="32" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
		<circle cx="12" cy="12" r="9" stroke="url(#gradient1)" stroke-width="1.5"/>
		<path d="M12 7v5l3 3" stroke="url(#gradient1)" stroke-width="1.5" stroke-linecap="round"/>
		<path d="M12 2v2M12 20v2M2 12h2M20 12h2" stroke="url(#gradient1)" stroke-width="1.5" stroke-linecap="round"/>
		<defs>
			<linearGradient id="gradient1" x1="4" y1="4" x2="20" y2="20" gradientUnits="userSpaceOnUse">
				<stop stop-color="#8b5cf6"/>
				<stop offset="1" stop-color="#c084fc"/>
			</linearGradient>
		</defs>
	</svg>
`;
---

<Layout
  title="Timestamp Converter - Convertidor de Timestamps Unix | Gratis"
  description="Convierte timestamps Unix a fechas legibles y viceversa. Herramienta gratuita para convertir entre tiempo Unix, epoch, y formatos de fecha ISO 8601."
  url="https://brix.center.com/timestamp-converter"
  image="/og-image.jpg"
>
  <main>
    <div class="container">
      <ToolHeader
        title="Timestamp Converter"
        subtitle="Convierte entre timestamps Unix y fechas legibles"
        icon={icon}
        showPrimaryButton={false}
      />

      <div class="converter-container">
        <!-- Current Timestamp Card -->
        <div class="current-time-card">
          <div class="current-time-header">
            <h3>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M12 6v6l4 2"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              Timestamp Actual
            </h3>
            <button class="refresh-btn" id="refreshBtn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M1 4v6h6M23 20v-6h-6"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
                <path
                  d="M20.49 9A9 9 0 0 0 5.64 5.64L1 10m22 4l-4.64 4.36A9 9 0 0 1 3.51 15"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
            </button>
          </div>
          <div class="current-time-display">
            <div class="timestamp-value" id="currentTimestamp">0</div>
            <div class="date-value" id="currentDate">-</div>
          </div>
        </div>

        <!-- Timestamp to Date Converter -->
        <div class="converter-section">
          <div class="section-header">
            <h3>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Timestamp → Fecha
            </h3>
          </div>

          <div class="input-group">
            <label for="timestampInput">Ingresa timestamp Unix:</label>
            <div class="input-with-buttons">
              <input
                type="text"
                id="timestampInput"
                placeholder="Ej: 1698528000"
                aria-label="Ingresa timestamp Unix"
              />
              <button class="btn-secondary" id="useCurrentBtn"
                >Usar Actual</button
              >
              <button class="btn-primary" id="convertToDateBtn"
                >Convertir</button
              >
            </div>
          </div>

          <div class="unit-selector">
            <label>Unidad:</label>
            <div class="radio-group">
              <label class="radio-option">
                <input
                  type="radio"
                  name="timestampUnit"
                  value="seconds"
                  checked
                />
                <span>Segundos (s)</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="timestampUnit" value="milliseconds" />
                <span>Milisegundos (ms)</span>
              </label>
            </div>
          </div>

          <div class="results-card" id="timestampResults">
            <div class="empty-state">
              <svg
                width="48"
                height="48"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="9"
                  stroke="currentColor"
                  stroke-width="1.5"></circle>
                <path
                  d="M12 7v5l3 3"
                  stroke="currentColor"
                  stroke-width="1.5"
                  stroke-linecap="round"></path>
              </svg>
              <p>Ingresa un timestamp para ver la conversión</p>
            </div>
          </div>
        </div>

        <!-- Date to Timestamp Converter -->
        <div class="converter-section">
          <div class="section-header">
            <h3>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="3"
                  y="4"
                  width="18"
                  height="18"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="2"></rect>
                <path
                  d="M16 2v4M8 2v4M3 10h18"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              Fecha → Timestamp
            </h3>
          </div>

          <div class="input-group">
            <label for="dateInput">Selecciona fecha y hora:</label>
            <div class="date-time-inputs">
              <input type="date" id="dateInput" aria-label="Selecciona fecha" />
              <input
                type="time"
                id="timeInput"
                value="00:00"
                aria-label="Selecciona hora"
              />
            </div>
            <button class="btn-primary full-width" id="convertToTimestampBtn"
              >Convertir a Timestamp</button
            >
          </div>

          <div class="unit-selector">
            <label>Formato de salida:</label>
            <div class="radio-group">
              <label class="radio-option">
                <input type="radio" name="outputUnit" value="seconds" checked />
                <span>Segundos</span>
              </label>
              <label class="radio-option">
                <input type="radio" name="outputUnit" value="milliseconds" />
                <span>Milisegundos</span>
              </label>
            </div>
          </div>

          <div class="results-card" id="dateResults">
            <div class="empty-state">
              <svg
                width="48"
                height="48"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <rect
                  x="3"
                  y="4"
                  width="18"
                  height="18"
                  rx="2"
                  stroke="currentColor"
                  stroke-width="1.5"></rect>
                <path
                  d="M16 2v4M8 2v4M3 10h18"
                  stroke="currentColor"
                  stroke-width="1.5"
                  stroke-linecap="round"></path>
              </svg>
              <p>Selecciona una fecha para ver el timestamp</p>
            </div>
          </div>
        </div>

        <!-- Info Section -->
        <div class="info-section">
          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <circle
                  cx="12"
                  cy="12"
                  r="10"
                  stroke="currentColor"
                  stroke-width="2"></circle>
                <path
                  d="M12 16v-4M12 8h.01"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"></path>
              </svg>
              ¿Qué es un Timestamp Unix?
            </h4>
            <p>
              Un timestamp Unix (también llamado epoch time) es el número de
              segundos transcurridos desde el 1 de enero de 1970 a las 00:00:00
              UTC. Es un estándar universal para representar tiempo en sistemas
              informáticos.
            </p>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Casos de uso
            </h4>
            <ul>
              <li>Sincronización de bases de datos</li>
              <li>Logs y auditoría de sistemas</li>
              <li>APIs y servicios web</li>
              <li>Programación de tareas</li>
              <li>Comparación de fechas</li>
            </ul>
          </div>

          <div class="info-card">
            <h4>
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                xmlns="http://www.w3.org/2000/svg"
              >
                <path
                  d="M13 2L3 14h9l-1 8 10-12h-9l1-8z"
                  stroke="currentColor"
                  stroke-width="2"
                  stroke-linecap="round"
                  stroke-linejoin="round"></path>
              </svg>
              Formatos soportados
            </h4>
            <ul>
              <li><strong>Segundos:</strong> 1698528000</li>
              <li><strong>Milisegundos:</strong> 1698528000000</li>
              <li><strong>ISO 8601:</strong> 2024-10-28T12:00:00Z</li>
              <li><strong>RFC 2822:</strong> Sun, 28 Oct 2024 12:00:00 GMT</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  </main>
</Layout>

<style>
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem 1rem;
  }

  .converter-container {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .current-time-card {
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border-radius: 16px;
    padding: 2rem;
    color: white;
    box-shadow: 0 8px 24px rgba(139, 92, 246, 0.3);
  }

  .current-time-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .current-time-header h3 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0;
  }

  .refresh-btn {
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
    background: rgba(255, 255, 255, 0.2);
    border: 1px solid rgba(255, 255, 255, 0.3);
    border-radius: 8px;
    color: white;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .refresh-btn:hover {
    background: rgba(255, 255, 255, 0.3);
    transform: rotate(180deg);
  }

  .current-time-display {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .timestamp-value {
    font-size: 2.5rem;
    font-weight: 700;
    font-family: "Monaco", "Courier New", monospace;
  }

  .date-value {
    font-size: 1.125rem;
    opacity: 0.9;
  }

  .converter-section {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 2rem;
    border: 1px solid var(--border-color);
  }

  .section-header {
    margin-bottom: 1.5rem;
  }

  .section-header h3 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.25rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0;
  }

  .section-header h3 svg {
    color: #8b5cf6;
  }

  .input-group {
    display: flex;
    flex-direction: column;
    gap: 1rem;
    margin-bottom: 1.5rem;
  }

  .input-group label {
    font-size: 1rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .input-with-buttons {
    display: flex;
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .input-with-buttons input {
    flex: 1;
    min-width: 200px;
    padding: 0.75rem 1rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .input-with-buttons input:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .date-time-inputs {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 1rem;
  }

  .date-time-inputs input {
    padding: 0.75rem 1rem;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
    transition: all 0.3s ease;
  }

  .date-time-inputs input:focus {
    outline: none;
    border-color: #8b5cf6;
    box-shadow: 0 0 0 3px rgba(139, 92, 246, 0.1);
  }

  .btn-primary {
    padding: 0.75rem 1.5rem;
    background: linear-gradient(135deg, #8b5cf6 0%, #c084fc 100%);
    border: none;
    border-radius: 8px;
    color: white;
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .btn-primary:hover {
    transform: translateY(-2px);
    box-shadow: 0 6px 20px rgba(139, 92, 246, 0.4);
  }

  .btn-primary.full-width {
    width: 100%;
    margin-top: 0.5rem;
  }

  .btn-secondary {
    padding: 0.75rem 1.5rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.3);
    border-radius: 8px;
    color: var(--text-primary);
    font-size: 1rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
    white-space: nowrap;
  }

  .btn-secondary:hover {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.5);
  }

  .unit-selector {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .unit-selector label {
    font-size: 0.9rem;
    font-weight: 600;
    color: var(--text-primary);
  }

  .radio-group {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .radio-option {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .radio-option:hover {
    background: rgba(139, 92, 246, 0.15);
  }

  .radio-option input[type="radio"] {
    accent-color: #8b5cf6;
    cursor: pointer;
  }

  .radio-option span {
    color: var(--text-primary);
    font-size: 0.9rem;
    font-weight: 500;
  }

  .results-card {
    min-height: 200px;
    background: var(--bg-primary);
    border: 1px solid var(--border-color);
    border-radius: 12px;
    padding: 1.5rem;
  }

  .empty-state {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    height: 170px;
    color: var(--text-secondary);
    text-align: center;
    gap: 1rem;
  }

  .empty-state svg {
    opacity: 0.5;
  }

  :global(.result-grid) {
    display: grid;
    gap: 1rem;
  }

  :global(.result-item) {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: var(--card-bg);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    transition: all 0.3s ease;
  }

  :global(.result-item:hover) {
    border-color: rgba(139, 92, 246, 0.3);
    box-shadow: 0 2px 8px rgba(139, 92, 246, 0.1);
  }

  :global(.result-label) {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--text-secondary);
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  :global(.result-value) {
    font-family: "Monaco", "Courier New", monospace;
    font-size: 1rem;
    color: var(--text-primary);
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  :global(.copy-btn) {
    padding: 0.5rem;
    background: rgba(139, 92, 246, 0.1);
    border: 1px solid rgba(139, 92, 246, 0.2);
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-primary);
  }

  :global(.copy-btn:hover) {
    background: rgba(139, 92, 246, 0.2);
    border-color: rgba(139, 92, 246, 0.4);
  }

  :global(.copy-btn svg) {
    width: 16px;
    height: 16px;
  }

  .info-section {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    margin-top: 2rem;
  }

  .info-card {
    background: var(--card-bg);
    border-radius: 12px;
    padding: 1.5rem;
    border: 1px solid var(--border-color);
  }

  .info-card h4 {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 1.125rem;
    font-weight: 600;
    color: var(--text-primary);
    margin: 0 0 1rem 0;
  }

  .info-card h4 svg {
    color: #8b5cf6;
  }

  .info-card p {
    color: var(--text-secondary);
    line-height: 1.6;
    margin: 0;
  }

  .info-card ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .info-card ul li {
    position: relative;
    padding-left: 1.5rem;
    color: var(--text-secondary);
    line-height: 1.8;
  }

  .info-card ul li::before {
    content: "→";
    position: absolute;
    left: 0;
    color: #8b5cf6;
    font-weight: bold;
  }

  .info-card ul li strong {
    color: var(--text-primary);
  }

  @media (max-width: 768px) {
    .input-with-buttons {
      flex-direction: column;
    }

    .input-with-buttons input {
      min-width: 100%;
    }

    .date-time-inputs {
      grid-template-columns: 1fr;
    }

    .timestamp-value {
      font-size: 1.75rem;
    }

    .radio-group {
      flex-direction: column;
    }

    .radio-option {
      width: 100%;
    }
  }

  /* Light Mode (default) */
  .container {
    --bg-primary: #ffffff;
    --bg-secondary: #f8f9fa;
    --card-bg: #ffffff;
    --text-primary: #1a1a2e;
    --text-secondary: #6b7280;
    --border-color: rgba(139, 92, 246, 0.2);
  }

  /* Dark Mode */
  :global(.dark-mode) .container {
    --bg-primary: #0f172a;
    --bg-secondary: #1e293b;
    --card-bg: #1e293b;
    --text-primary: #f8fafc;
    --text-secondary: #cbd5e1;
    --border-color: #334155;
  }

  :global(.dark-mode) .converter-section,
  :global(.dark-mode) .info-card,
  :global(.dark-mode) .results-card {
    background: #1e293b;
    border-color: #334155;
  }

  :global(.dark-mode) .input-with-buttons input,
  :global(.dark-mode) .date-time-inputs input {
    background: #0f172a;
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .btn-secondary {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) .btn-secondary:hover {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .radio-option {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
  }

  :global(.dark-mode) .radio-option:hover {
    background: rgba(139, 92, 246, 0.3);
  }

  :global(.dark-mode) :global(.result-item) {
    background: #0f172a;
    border-color: #334155;
  }

  :global(.dark-mode) :global(.result-item:hover) {
    border-color: #8b5cf6;
  }

  :global(.dark-mode) :global(.copy-btn) {
    background: rgba(139, 92, 246, 0.2);
    border-color: #334155;
    color: #cbd5e1;
  }

  :global(.dark-mode) :global(.copy-btn:hover) {
    background: rgba(139, 92, 246, 0.3);
    border-color: #8b5cf6;
  }

  :global(.dark-mode) .empty-state {
    color: #64748b;
  }
</style>

<script>
  // Update current timestamp
  function updateCurrentTime() {
    const now = new Date();
    const timestamp = Math.floor(now.getTime() / 1000);

    const currentTimestampEl = document.getElementById("currentTimestamp");
    const currentDateEl = document.getElementById("currentDate");

    if (currentTimestampEl) {
      currentTimestampEl.textContent = timestamp.toString();
    }

    if (currentDateEl) {
      currentDateEl.textContent = now.toLocaleString("es-ES", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      });
    }
  }

  // Format timestamp to various date formats
  function formatTimestamp(
    timestamp: number,
    unit: "seconds" | "milliseconds"
  ) {
    const ms = unit === "milliseconds" ? timestamp : timestamp * 1000;
    const date = new Date(ms);

    return {
      iso8601: date.toISOString(),
      rfc2822: date.toUTCString(),
      local: date.toLocaleString("es-ES", {
        weekday: "long",
        year: "numeric",
        month: "long",
        day: "numeric",
        hour: "2-digit",
        minute: "2-digit",
        second: "2-digit",
      }),
      date: date.toLocaleDateString("es-ES"),
      time: date.toLocaleTimeString("es-ES"),
      relative: getRelativeTime(date),
    };
  }

  // Get relative time (e.g., "hace 2 días")
  function getRelativeTime(date: Date): string {
    const now = new Date();
    const diffMs = now.getTime() - date.getTime();
    const diffSec = Math.floor(diffMs / 1000);
    const diffMin = Math.floor(diffSec / 60);
    const diffHour = Math.floor(diffMin / 60);
    const diffDay = Math.floor(diffHour / 24);

    if (diffSec < 60) return "Justo ahora";
    if (diffMin < 60)
      return `Hace ${diffMin} minuto${diffMin !== 1 ? "s" : ""}`;
    if (diffHour < 24)
      return `Hace ${diffHour} hora${diffHour !== 1 ? "s" : ""}`;
    if (diffDay < 30) return `Hace ${diffDay} día${diffDay !== 1 ? "s" : ""}`;

    return date.toLocaleDateString("es-ES");
  }

  // Display timestamp results
  function displayTimestampResults(
    formats: ReturnType<typeof formatTimestamp>
  ) {
    const resultsEl = document.getElementById("timestampResults");
    if (!resultsEl) return;

    resultsEl.innerHTML = `
			<div class="result-grid">
				<div class="result-item">
					<div>
						<div class="result-label">ISO 8601</div>
						<div class="result-value">${formats.iso8601}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.iso8601}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">RFC 2822</div>
						<div class="result-value">${formats.rfc2822}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.rfc2822}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">Fecha Local</div>
						<div class="result-value">${formats.local}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.local}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">Solo Fecha</div>
						<div class="result-value">${formats.date}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.date}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">Solo Hora</div>
						<div class="result-value">${formats.time}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.time}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">Tiempo Relativo</div>
						<div class="result-value">${formats.relative}</div>
					</div>
					<button class="copy-btn" data-copy="${formats.relative}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
			</div>
		`;

    // Add copy event listeners
    const copyButtons = resultsEl.querySelectorAll(".copy-btn");
    copyButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const text = btn.getAttribute("data-copy");
        if (text) copyToClipboard(text);
      });
    });
  }

  // Display date to timestamp results
  function displayDateResults(
    timestamp: number,
    unit: "seconds" | "milliseconds"
  ) {
    const resultsEl = document.getElementById("dateResults");
    if (!resultsEl) return;

    const seconds =
      unit === "seconds" ? timestamp : Math.floor(timestamp / 1000);
    const milliseconds = unit === "milliseconds" ? timestamp : timestamp * 1000;

    resultsEl.innerHTML = `
			<div class="result-grid">
				<div class="result-item">
					<div>
						<div class="result-label">Segundos (s)</div>
						<div class="result-value">${seconds}</div>
					</div>
					<button class="copy-btn" data-copy="${seconds}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
				<div class="result-item">
					<div>
						<div class="result-label">Milisegundos (ms)</div>
						<div class="result-value">${milliseconds}</div>
					</div>
					<button class="copy-btn" data-copy="${milliseconds}">
						<svg width="16" height="16" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg">
							<rect x="9" y="9" width="13" height="13" rx="2" stroke="currentColor" stroke-width="2"/>
							<path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1" stroke="currentColor" stroke-width="2"/>
						</svg>
					</button>
				</div>
			</div>
		`;

    // Add copy event listeners
    const copyButtons = resultsEl.querySelectorAll(".copy-btn");
    copyButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        const text = btn.getAttribute("data-copy");
        if (text) copyToClipboard(text);
      });
    });
  }

  // Copy to clipboard
  async function copyToClipboard(text: string) {
    try {
      await navigator.clipboard.writeText(text);
      showNotification("¡Copiado al portapapeles!", "success");
    } catch (error) {
      showNotification("Error al copiar", "error");
    }
  }

  // Show notification
  function showNotification(
    message: string,
    type: "success" | "error" | "info"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.textContent = message;

    notification.style.cssText = `
			position: fixed;
			bottom: 2rem;
			right: 2rem;
			padding: 1rem 1.5rem;
			background: ${type === "success" ? "#10b981" : type === "error" ? "#ef4444" : "#3b82f6"};
			color: white;
			border-radius: 8px;
			font-weight: 500;
			box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
			z-index: 1000;
			animation: slideIn 0.3s ease;
		`;

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.style.animation = "slideOut 0.3s ease";
      setTimeout(() => notification.remove(), 300);
    }, 3000);
  }

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    // Initialize current time
    updateCurrentTime();
    setInterval(updateCurrentTime, 1000);

    // Set today's date as default
    const dateInput = document.getElementById("dateInput") as HTMLInputElement;
    const timeInput = document.getElementById("timeInput") as HTMLInputElement;
    if (dateInput && timeInput) {
      const now = new Date();
      dateInput.value = now.toISOString().split("T")[0];
      timeInput.value = now.toTimeString().slice(0, 5);
    }

    // Refresh button
    const refreshBtn = document.getElementById("refreshBtn");
    refreshBtn?.addEventListener("click", updateCurrentTime);

    // Use current timestamp button
    const useCurrentBtn = document.getElementById("useCurrentBtn");
    const timestampInput = document.getElementById(
      "timestampInput"
    ) as HTMLInputElement;
    useCurrentBtn?.addEventListener("click", () => {
      const currentTimestamp =
        document.getElementById("currentTimestamp")?.textContent;
      if (currentTimestamp && timestampInput) {
        timestampInput.value = currentTimestamp;
      }
    });

    // Convert timestamp to date
    const convertToDateBtn = document.getElementById("convertToDateBtn");
    convertToDateBtn?.addEventListener("click", () => {
      const input = (
        document.getElementById("timestampInput") as HTMLInputElement
      ).value.trim();
      const unit = (
        document.querySelector(
          'input[name="timestampUnit"]:checked'
        ) as HTMLInputElement
      )?.value as "seconds" | "milliseconds";

      if (!input) {
        showNotification("Por favor ingresa un timestamp", "error");
        return;
      }

      const timestamp = parseInt(input);
      if (isNaN(timestamp)) {
        showNotification("Timestamp inválido", "error");
        return;
      }

      try {
        const formats = formatTimestamp(timestamp, unit);
        displayTimestampResults(formats);
        showNotification("¡Conversión exitosa!", "success");
      } catch (error) {
        showNotification("Error al convertir timestamp", "error");
      }
    });

    // Convert date to timestamp
    const convertToTimestampBtn = document.getElementById(
      "convertToTimestampBtn"
    );
    convertToTimestampBtn?.addEventListener("click", () => {
      const dateValue = (
        document.getElementById("dateInput") as HTMLInputElement
      )?.value;
      const timeValue = (
        document.getElementById("timeInput") as HTMLInputElement
      )?.value;
      const outputUnit = (
        document.querySelector(
          'input[name="outputUnit"]:checked'
        ) as HTMLInputElement
      )?.value as "seconds" | "milliseconds";

      if (!dateValue) {
        showNotification("Por favor selecciona una fecha", "error");
        return;
      }

      try {
        const dateTimeStr = `${dateValue}T${timeValue || "00:00"}:00`;
        const date = new Date(dateTimeStr);

        if (isNaN(date.getTime())) {
          showNotification("Fecha inválida", "error");
          return;
        }

        const timestamp =
          outputUnit === "seconds"
            ? Math.floor(date.getTime() / 1000)
            : date.getTime();

        displayDateResults(timestamp, outputUnit);
        showNotification("¡Conversión exitosa!", "success");
      } catch (error) {
        showNotification("Error al convertir fecha", "error");
      }
    });

    // Enter key support
    timestampInput?.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        convertToDateBtn?.click();
      }
    });
  });

  // Add animations
  const style = document.createElement("style");
  style.textContent = `
		@keyframes slideIn {
			from {
				transform: translateX(100%);
				opacity: 0;
			}
			to {
				transform: translateX(0);
				opacity: 1;
			}
		}
		@keyframes slideOut {
			from {
				transform: translateX(0);
				opacity: 1;
			}
			to {
				transform: translateX(100%);
				opacity: 0;
			}
		}
	`;
  document.head.appendChild(style);
</script>
